
port_freertos_atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00001514  000015a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001514  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000677  00800134  00800134  000015dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000160c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000460  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005baf  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001718  00000000  00000000  0000765b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002924  00000000  00000000  00008d73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dfc  00000000  00000000  0000b698  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001cb4  00000000  00000000  0000c494  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a25  00000000  00000000  0000e148  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000410  00000000  00000000  00012b6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
       8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
       c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      2c:	0c 94 48 02 	jmp	0x490	; 0x490 <__vector_11>
      30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      40:	0c 94 02 09 	jmp	0x1204	; 0x1204 <__vector_16>
      44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      48:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__vector_18>
      4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	74 61       	ori	r23, 0x14	; 20
      6a:	73 6b       	ori	r23, 0xB3	; 179
      6c:	20 32       	cpi	r18, 0x20	; 32
	...

0000006f <_ZZL14vLEDBlink_taskPvE3__c>:
      6f:	74 61 73 6b 20 31 00                                task 1.

00000076 <_ZZ4mainE3__c_0>:
      76:	48 65 6c 6c 6f 20 77 6f 72 6c 64 21 00              Hello world!.

00000083 <_ZZ4mainE3__c>:
      83:	69 6e 69 63 69 61 6e 64 6f 2e 2e 00 00              iniciando....

00000090 <__ctors_start>:
      90:	e8 08       	sbc	r14, r8

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
      9e:	11 e0       	ldi	r17, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	e4 e1       	ldi	r30, 0x14	; 20
      a6:	f5 e1       	ldi	r31, 0x15	; 21
      a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x10>
      aa:	05 90       	lpm	r0, Z+
      ac:	0d 92       	st	X+, r0
      ae:	a4 33       	cpi	r26, 0x34	; 52
      b0:	b1 07       	cpc	r27, r17
      b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0xc>

000000b4 <__do_clear_bss>:
      b4:	27 e0       	ldi	r18, 0x07	; 7
      b6:	a4 e3       	ldi	r26, 0x34	; 52
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	ab 3a       	cpi	r26, 0xAB	; 171
      c0:	b2 07       	cpc	r27, r18
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>

000000c4 <__do_global_ctors>:
      c4:	10 e0       	ldi	r17, 0x00	; 0
      c6:	c9 e4       	ldi	r28, 0x49	; 73
      c8:	d0 e0       	ldi	r29, 0x00	; 0
      ca:	04 c0       	rjmp	.+8      	; 0xd4 <__do_global_ctors+0x10>
      cc:	21 97       	sbiw	r28, 0x01	; 1
      ce:	fe 01       	movw	r30, r28
      d0:	0e 94 82 0a 	call	0x1504	; 0x1504 <__tablejump2__>
      d4:	c8 34       	cpi	r28, 0x48	; 72
      d6:	d1 07       	cpc	r29, r17
      d8:	c9 f7       	brne	.-14     	; 0xcc <__do_global_ctors+0x8>
      da:	0e 94 5e 08 	call	0x10bc	; 0x10bc <main>
      de:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <_exit>

000000e2 <__bad_interrupt>:
      e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <_ZN3Adc4initEh12adcPrescalerh>:
	  
		-mode: Setea el modo de trabajo del ADC. SINGLE_CONVERSION, AUTO_TRIGGER, FREE_RUNNING (ATmega8), INTERRUPT.
			   Se pueden combinar distintos flags, por ejemplo: SINGLE_CONVERSION | INTERRUPT o AUTO_TRIGGER | INTERRUPT.
	*/
	
	ADMUX = vref;
      e6:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | mode | prescaler;
      ea:	42 2b       	or	r20, r18
      ec:	40 68       	ori	r20, 0x80	; 128
      ee:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
      f2:	08 95       	ret

000000f4 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
      f4:	fc 01       	movw	r30, r24
      f6:	03 96       	adiw	r24, 0x03	; 3
      f8:	92 83       	std	Z+2, r25	; 0x02
      fa:	81 83       	std	Z+1, r24	; 0x01
      fc:	2f ef       	ldi	r18, 0xFF	; 255
      fe:	3f ef       	ldi	r19, 0xFF	; 255
     100:	34 83       	std	Z+4, r19	; 0x04
     102:	23 83       	std	Z+3, r18	; 0x03
     104:	96 83       	std	Z+6, r25	; 0x06
     106:	85 83       	std	Z+5, r24	; 0x05
     108:	90 87       	std	Z+8, r25	; 0x08
     10a:	87 83       	std	Z+7, r24	; 0x07
     10c:	10 82       	st	Z, r1
     10e:	08 95       	ret

00000110 <vListInitialiseItem>:
     110:	fc 01       	movw	r30, r24
     112:	11 86       	std	Z+9, r1	; 0x09
     114:	10 86       	std	Z+8, r1	; 0x08
     116:	08 95       	ret

00000118 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     11e:	48 81       	ld	r20, Y
     120:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     122:	4f 3f       	cpi	r20, 0xFF	; 255
     124:	2f ef       	ldi	r18, 0xFF	; 255
     126:	52 07       	cpc	r21, r18
     128:	21 f4       	brne	.+8      	; 0x132 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     12a:	fc 01       	movw	r30, r24
     12c:	a7 81       	ldd	r26, Z+7	; 0x07
     12e:	b0 85       	ldd	r27, Z+8	; 0x08
     130:	0d c0       	rjmp	.+26     	; 0x14c <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     132:	dc 01       	movw	r26, r24
     134:	13 96       	adiw	r26, 0x03	; 3
     136:	01 c0       	rjmp	.+2      	; 0x13a <vListInsert+0x22>
     138:	df 01       	movw	r26, r30
     13a:	12 96       	adiw	r26, 0x02	; 2
     13c:	ed 91       	ld	r30, X+
     13e:	fc 91       	ld	r31, X
     140:	13 97       	sbiw	r26, 0x03	; 3
     142:	20 81       	ld	r18, Z
     144:	31 81       	ldd	r19, Z+1	; 0x01
     146:	42 17       	cp	r20, r18
     148:	53 07       	cpc	r21, r19
     14a:	b0 f7       	brcc	.-20     	; 0x138 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     14c:	12 96       	adiw	r26, 0x02	; 2
     14e:	ed 91       	ld	r30, X+
     150:	fc 91       	ld	r31, X
     152:	13 97       	sbiw	r26, 0x03	; 3
     154:	fb 83       	std	Y+3, r31	; 0x03
     156:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     158:	d5 83       	std	Z+5, r29	; 0x05
     15a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     15c:	bd 83       	std	Y+5, r27	; 0x05
     15e:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     160:	13 96       	adiw	r26, 0x03	; 3
     162:	dc 93       	st	X, r29
     164:	ce 93       	st	-X, r28
     166:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     168:	99 87       	std	Y+9, r25	; 0x09
     16a:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     16c:	fc 01       	movw	r30, r24
     16e:	20 81       	ld	r18, Z
     170:	2f 5f       	subi	r18, 0xFF	; 255
     172:	20 83       	st	Z, r18
}
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	08 95       	ret

0000017a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     180:	a0 85       	ldd	r26, Z+8	; 0x08
     182:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     184:	c2 81       	ldd	r28, Z+2	; 0x02
     186:	d3 81       	ldd	r29, Z+3	; 0x03
     188:	84 81       	ldd	r24, Z+4	; 0x04
     18a:	95 81       	ldd	r25, Z+5	; 0x05
     18c:	9d 83       	std	Y+5, r25	; 0x05
     18e:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     190:	c4 81       	ldd	r28, Z+4	; 0x04
     192:	d5 81       	ldd	r29, Z+5	; 0x05
     194:	82 81       	ldd	r24, Z+2	; 0x02
     196:	93 81       	ldd	r25, Z+3	; 0x03
     198:	9b 83       	std	Y+3, r25	; 0x03
     19a:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     19c:	11 96       	adiw	r26, 0x01	; 1
     19e:	8d 91       	ld	r24, X+
     1a0:	9c 91       	ld	r25, X
     1a2:	12 97       	sbiw	r26, 0x02	; 2
     1a4:	e8 17       	cp	r30, r24
     1a6:	f9 07       	cpc	r31, r25
     1a8:	31 f4       	brne	.+12     	; 0x1b6 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     1aa:	84 81       	ldd	r24, Z+4	; 0x04
     1ac:	95 81       	ldd	r25, Z+5	; 0x05
     1ae:	12 96       	adiw	r26, 0x02	; 2
     1b0:	9c 93       	st	X, r25
     1b2:	8e 93       	st	-X, r24
     1b4:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     1b6:	11 86       	std	Z+9, r1	; 0x09
     1b8:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     1ba:	8c 91       	ld	r24, X
     1bc:	81 50       	subi	r24, 0x01	; 1
     1be:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     1c0:	8c 91       	ld	r24, X
}
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	08 95       	ret

000001c8 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     1c8:	89 ef       	ldi	r24, 0xF9	; 249
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     1d0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     1d4:	e0 e8       	ldi	r30, 0x80	; 128
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	8c 7f       	andi	r24, 0xFC	; 252
     1dc:	80 83       	st	Z, r24
     1de:	8b e0       	ldi	r24, 0x0B	; 11
     1e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     1e4:	ef e6       	ldi	r30, 0x6F	; 111
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	82 60       	ori	r24, 0x02	; 2
     1ec:	80 83       	st	Z, r24
     1ee:	08 95       	ret

000001f0 <pxPortInitialiseStack>:
     1f0:	31 e1       	ldi	r19, 0x11	; 17
     1f2:	fc 01       	movw	r30, r24
     1f4:	30 83       	st	Z, r19
     1f6:	31 97       	sbiw	r30, 0x01	; 1
     1f8:	22 e2       	ldi	r18, 0x22	; 34
     1fa:	20 83       	st	Z, r18
     1fc:	31 97       	sbiw	r30, 0x01	; 1
     1fe:	a3 e3       	ldi	r26, 0x33	; 51
     200:	a0 83       	st	Z, r26
     202:	31 97       	sbiw	r30, 0x01	; 1
     204:	60 83       	st	Z, r22
     206:	31 97       	sbiw	r30, 0x01	; 1
     208:	70 83       	st	Z, r23
     20a:	31 97       	sbiw	r30, 0x01	; 1
     20c:	10 82       	st	Z, r1
     20e:	31 97       	sbiw	r30, 0x01	; 1
     210:	60 e8       	ldi	r22, 0x80	; 128
     212:	60 83       	st	Z, r22
     214:	31 97       	sbiw	r30, 0x01	; 1
     216:	10 82       	st	Z, r1
     218:	31 97       	sbiw	r30, 0x01	; 1
     21a:	62 e0       	ldi	r22, 0x02	; 2
     21c:	60 83       	st	Z, r22
     21e:	31 97       	sbiw	r30, 0x01	; 1
     220:	63 e0       	ldi	r22, 0x03	; 3
     222:	60 83       	st	Z, r22
     224:	31 97       	sbiw	r30, 0x01	; 1
     226:	64 e0       	ldi	r22, 0x04	; 4
     228:	60 83       	st	Z, r22
     22a:	31 97       	sbiw	r30, 0x01	; 1
     22c:	65 e0       	ldi	r22, 0x05	; 5
     22e:	60 83       	st	Z, r22
     230:	31 97       	sbiw	r30, 0x01	; 1
     232:	66 e0       	ldi	r22, 0x06	; 6
     234:	60 83       	st	Z, r22
     236:	31 97       	sbiw	r30, 0x01	; 1
     238:	67 e0       	ldi	r22, 0x07	; 7
     23a:	60 83       	st	Z, r22
     23c:	31 97       	sbiw	r30, 0x01	; 1
     23e:	68 e0       	ldi	r22, 0x08	; 8
     240:	60 83       	st	Z, r22
     242:	31 97       	sbiw	r30, 0x01	; 1
     244:	69 e0       	ldi	r22, 0x09	; 9
     246:	60 83       	st	Z, r22
     248:	31 97       	sbiw	r30, 0x01	; 1
     24a:	60 e1       	ldi	r22, 0x10	; 16
     24c:	60 83       	st	Z, r22
     24e:	31 97       	sbiw	r30, 0x01	; 1
     250:	30 83       	st	Z, r19
     252:	31 97       	sbiw	r30, 0x01	; 1
     254:	32 e1       	ldi	r19, 0x12	; 18
     256:	30 83       	st	Z, r19
     258:	31 97       	sbiw	r30, 0x01	; 1
     25a:	33 e1       	ldi	r19, 0x13	; 19
     25c:	30 83       	st	Z, r19
     25e:	31 97       	sbiw	r30, 0x01	; 1
     260:	34 e1       	ldi	r19, 0x14	; 20
     262:	30 83       	st	Z, r19
     264:	31 97       	sbiw	r30, 0x01	; 1
     266:	35 e1       	ldi	r19, 0x15	; 21
     268:	30 83       	st	Z, r19
     26a:	31 97       	sbiw	r30, 0x01	; 1
     26c:	36 e1       	ldi	r19, 0x16	; 22
     26e:	30 83       	st	Z, r19
     270:	31 97       	sbiw	r30, 0x01	; 1
     272:	37 e1       	ldi	r19, 0x17	; 23
     274:	30 83       	st	Z, r19
     276:	31 97       	sbiw	r30, 0x01	; 1
     278:	38 e1       	ldi	r19, 0x18	; 24
     27a:	30 83       	st	Z, r19
     27c:	31 97       	sbiw	r30, 0x01	; 1
     27e:	39 e1       	ldi	r19, 0x19	; 25
     280:	30 83       	st	Z, r19
     282:	31 97       	sbiw	r30, 0x01	; 1
     284:	30 e2       	ldi	r19, 0x20	; 32
     286:	30 83       	st	Z, r19
     288:	31 97       	sbiw	r30, 0x01	; 1
     28a:	31 e2       	ldi	r19, 0x21	; 33
     28c:	30 83       	st	Z, r19
     28e:	31 97       	sbiw	r30, 0x01	; 1
     290:	20 83       	st	Z, r18
     292:	31 97       	sbiw	r30, 0x01	; 1
     294:	23 e2       	ldi	r18, 0x23	; 35
     296:	20 83       	st	Z, r18
     298:	31 97       	sbiw	r30, 0x01	; 1
     29a:	40 83       	st	Z, r20
     29c:	31 97       	sbiw	r30, 0x01	; 1
     29e:	50 83       	st	Z, r21
     2a0:	31 97       	sbiw	r30, 0x01	; 1
     2a2:	26 e2       	ldi	r18, 0x26	; 38
     2a4:	20 83       	st	Z, r18
     2a6:	31 97       	sbiw	r30, 0x01	; 1
     2a8:	27 e2       	ldi	r18, 0x27	; 39
     2aa:	20 83       	st	Z, r18
     2ac:	31 97       	sbiw	r30, 0x01	; 1
     2ae:	28 e2       	ldi	r18, 0x28	; 40
     2b0:	20 83       	st	Z, r18
     2b2:	31 97       	sbiw	r30, 0x01	; 1
     2b4:	29 e2       	ldi	r18, 0x29	; 41
     2b6:	20 83       	st	Z, r18
     2b8:	31 97       	sbiw	r30, 0x01	; 1
     2ba:	20 e3       	ldi	r18, 0x30	; 48
     2bc:	20 83       	st	Z, r18
     2be:	31 97       	sbiw	r30, 0x01	; 1
     2c0:	21 e3       	ldi	r18, 0x31	; 49
     2c2:	20 83       	st	Z, r18
     2c4:	86 97       	sbiw	r24, 0x26	; 38
     2c6:	08 95       	ret

000002c8 <xPortStartScheduler>:
     2c8:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <prvSetupTimerInterrupt>
     2cc:	a0 91 70 07 	lds	r26, 0x0770	; 0x800770 <pxCurrentTCB>
     2d0:	b0 91 71 07 	lds	r27, 0x0771	; 0x800771 <pxCurrentTCB+0x1>
     2d4:	cd 91       	ld	r28, X+
     2d6:	cd bf       	out	0x3d, r28	; 61
     2d8:	dd 91       	ld	r29, X+
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	ff 91       	pop	r31
     2de:	ef 91       	pop	r30
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	bf 91       	pop	r27
     2e6:	af 91       	pop	r26
     2e8:	9f 91       	pop	r25
     2ea:	8f 91       	pop	r24
     2ec:	7f 91       	pop	r23
     2ee:	6f 91       	pop	r22
     2f0:	5f 91       	pop	r21
     2f2:	4f 91       	pop	r20
     2f4:	3f 91       	pop	r19
     2f6:	2f 91       	pop	r18
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	ff 90       	pop	r15
     2fe:	ef 90       	pop	r14
     300:	df 90       	pop	r13
     302:	cf 90       	pop	r12
     304:	bf 90       	pop	r11
     306:	af 90       	pop	r10
     308:	9f 90       	pop	r9
     30a:	8f 90       	pop	r8
     30c:	7f 90       	pop	r7
     30e:	6f 90       	pop	r6
     310:	5f 90       	pop	r5
     312:	4f 90       	pop	r4
     314:	3f 90       	pop	r3
     316:	2f 90       	pop	r2
     318:	1f 90       	pop	r1
     31a:	0f 90       	pop	r0
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	0f 90       	pop	r0
     320:	08 95       	ret
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	08 95       	ret

00000326 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     326:	0f 92       	push	r0
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	f8 94       	cli
     32c:	0f 92       	push	r0
     32e:	1f 92       	push	r1
     330:	11 24       	eor	r1, r1
     332:	2f 92       	push	r2
     334:	3f 92       	push	r3
     336:	4f 92       	push	r4
     338:	5f 92       	push	r5
     33a:	6f 92       	push	r6
     33c:	7f 92       	push	r7
     33e:	8f 92       	push	r8
     340:	9f 92       	push	r9
     342:	af 92       	push	r10
     344:	bf 92       	push	r11
     346:	cf 92       	push	r12
     348:	df 92       	push	r13
     34a:	ef 92       	push	r14
     34c:	ff 92       	push	r15
     34e:	0f 93       	push	r16
     350:	1f 93       	push	r17
     352:	2f 93       	push	r18
     354:	3f 93       	push	r19
     356:	4f 93       	push	r20
     358:	5f 93       	push	r21
     35a:	6f 93       	push	r22
     35c:	7f 93       	push	r23
     35e:	8f 93       	push	r24
     360:	9f 93       	push	r25
     362:	af 93       	push	r26
     364:	bf 93       	push	r27
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	ef 93       	push	r30
     36c:	ff 93       	push	r31
     36e:	a0 91 70 07 	lds	r26, 0x0770	; 0x800770 <pxCurrentTCB>
     372:	b0 91 71 07 	lds	r27, 0x0771	; 0x800771 <pxCurrentTCB+0x1>
     376:	0d b6       	in	r0, 0x3d	; 61
     378:	0d 92       	st	X+, r0
     37a:	0e b6       	in	r0, 0x3e	; 62
     37c:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     37e:	0e 94 0c 07 	call	0xe18	; 0xe18 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     382:	a0 91 70 07 	lds	r26, 0x0770	; 0x800770 <pxCurrentTCB>
     386:	b0 91 71 07 	lds	r27, 0x0771	; 0x800771 <pxCurrentTCB+0x1>
     38a:	cd 91       	ld	r28, X+
     38c:	cd bf       	out	0x3d, r28	; 61
     38e:	dd 91       	ld	r29, X+
     390:	de bf       	out	0x3e, r29	; 62
     392:	ff 91       	pop	r31
     394:	ef 91       	pop	r30
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	bf 91       	pop	r27
     39c:	af 91       	pop	r26
     39e:	9f 91       	pop	r25
     3a0:	8f 91       	pop	r24
     3a2:	7f 91       	pop	r23
     3a4:	6f 91       	pop	r22
     3a6:	5f 91       	pop	r21
     3a8:	4f 91       	pop	r20
     3aa:	3f 91       	pop	r19
     3ac:	2f 91       	pop	r18
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	ff 90       	pop	r15
     3b4:	ef 90       	pop	r14
     3b6:	df 90       	pop	r13
     3b8:	cf 90       	pop	r12
     3ba:	bf 90       	pop	r11
     3bc:	af 90       	pop	r10
     3be:	9f 90       	pop	r9
     3c0:	8f 90       	pop	r8
     3c2:	7f 90       	pop	r7
     3c4:	6f 90       	pop	r6
     3c6:	5f 90       	pop	r5
     3c8:	4f 90       	pop	r4
     3ca:	3f 90       	pop	r3
     3cc:	2f 90       	pop	r2
     3ce:	1f 90       	pop	r1
     3d0:	0f 90       	pop	r0
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	0f 90       	pop	r0

	asm volatile ( "ret" );
     3d6:	08 95       	ret

000003d8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     3d8:	0f 92       	push	r0
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	0f 92       	push	r0
     3e0:	1f 92       	push	r1
     3e2:	11 24       	eor	r1, r1
     3e4:	2f 92       	push	r2
     3e6:	3f 92       	push	r3
     3e8:	4f 92       	push	r4
     3ea:	5f 92       	push	r5
     3ec:	6f 92       	push	r6
     3ee:	7f 92       	push	r7
     3f0:	8f 92       	push	r8
     3f2:	9f 92       	push	r9
     3f4:	af 92       	push	r10
     3f6:	bf 92       	push	r11
     3f8:	cf 92       	push	r12
     3fa:	df 92       	push	r13
     3fc:	ef 92       	push	r14
     3fe:	ff 92       	push	r15
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	2f 93       	push	r18
     406:	3f 93       	push	r19
     408:	4f 93       	push	r20
     40a:	5f 93       	push	r21
     40c:	6f 93       	push	r22
     40e:	7f 93       	push	r23
     410:	8f 93       	push	r24
     412:	9f 93       	push	r25
     414:	af 93       	push	r26
     416:	bf 93       	push	r27
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	ef 93       	push	r30
     41e:	ff 93       	push	r31
     420:	a0 91 70 07 	lds	r26, 0x0770	; 0x800770 <pxCurrentTCB>
     424:	b0 91 71 07 	lds	r27, 0x0771	; 0x800771 <pxCurrentTCB+0x1>
     428:	0d b6       	in	r0, 0x3d	; 61
     42a:	0d 92       	st	X+, r0
     42c:	0e b6       	in	r0, 0x3e	; 62
     42e:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     430:	0e 94 db 04 	call	0x9b6	; 0x9b6 <xTaskIncrementTick>
     434:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     436:	0e 94 0c 07 	call	0xe18	; 0xe18 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     43a:	a0 91 70 07 	lds	r26, 0x0770	; 0x800770 <pxCurrentTCB>
     43e:	b0 91 71 07 	lds	r27, 0x0771	; 0x800771 <pxCurrentTCB+0x1>
     442:	cd 91       	ld	r28, X+
     444:	cd bf       	out	0x3d, r28	; 61
     446:	dd 91       	ld	r29, X+
     448:	de bf       	out	0x3e, r29	; 62
     44a:	ff 91       	pop	r31
     44c:	ef 91       	pop	r30
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	bf 91       	pop	r27
     454:	af 91       	pop	r26
     456:	9f 91       	pop	r25
     458:	8f 91       	pop	r24
     45a:	7f 91       	pop	r23
     45c:	6f 91       	pop	r22
     45e:	5f 91       	pop	r21
     460:	4f 91       	pop	r20
     462:	3f 91       	pop	r19
     464:	2f 91       	pop	r18
     466:	1f 91       	pop	r17
     468:	0f 91       	pop	r16
     46a:	ff 90       	pop	r15
     46c:	ef 90       	pop	r14
     46e:	df 90       	pop	r13
     470:	cf 90       	pop	r12
     472:	bf 90       	pop	r11
     474:	af 90       	pop	r10
     476:	9f 90       	pop	r9
     478:	8f 90       	pop	r8
     47a:	7f 90       	pop	r7
     47c:	6f 90       	pop	r6
     47e:	5f 90       	pop	r5
     480:	4f 90       	pop	r4
     482:	3f 90       	pop	r3
     484:	2f 90       	pop	r2
     486:	1f 90       	pop	r1
     488:	0f 90       	pop	r0
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	0f 90       	pop	r0

	asm volatile ( "ret" );
     48e:	08 95       	ret

00000490 <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     490:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <vPortYieldFromTick>
		asm volatile ( "reti" );
     494:	18 95       	reti

00000496 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     49c:	0e 94 cb 04 	call	0x996	; 0x996 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     4a0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
     4a4:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
     4a8:	89 2b       	or	r24, r25
     4aa:	31 f4       	brne	.+12     	; 0x4b8 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     4ac:	89 e3       	ldi	r24, 0x39	; 57
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__data_end+0x1>
     4b4:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     4b8:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <xNextFreeByte>
     4bc:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <xNextFreeByte+0x1>
     4c0:	c9 01       	movw	r24, r18
     4c2:	8c 0f       	add	r24, r28
     4c4:	9d 1f       	adc	r25, r29
     4c6:	8b 3d       	cpi	r24, 0xDB	; 219
     4c8:	45 e0       	ldi	r20, 0x05	; 5
     4ca:	94 07       	cpc	r25, r20
     4cc:	70 f4       	brcc	.+28     	; 0x4ea <pvPortMalloc+0x54>
     4ce:	28 17       	cp	r18, r24
     4d0:	39 07       	cpc	r19, r25
     4d2:	70 f4       	brcc	.+28     	; 0x4f0 <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     4d4:	c0 91 34 01 	lds	r28, 0x0134	; 0x800134 <__data_end>
     4d8:	d0 91 35 01 	lds	r29, 0x0135	; 0x800135 <__data_end+0x1>
     4dc:	c2 0f       	add	r28, r18
     4de:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
     4e0:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <xNextFreeByte+0x1>
     4e4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <xNextFreeByte>
     4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     4ea:	c0 e0       	ldi	r28, 0x00	; 0
     4ec:	d0 e0       	ldi	r29, 0x00	; 0
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <pvPortMalloc+0x5e>
     4f0:	c0 e0       	ldi	r28, 0x00	; 0
     4f2:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     4f4:	0e 94 f5 05 	call	0xbea	; 0xbea <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     4f8:	ce 01       	movw	r24, r28
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     500:	08 95       	ret

00000502 <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     502:	e0 91 38 07 	lds	r30, 0x0738	; 0x800738 <pxDelayedTaskList>
     506:	f0 91 39 07 	lds	r31, 0x0739	; 0x800739 <pxDelayedTaskList+0x1>
     50a:	80 81       	ld	r24, Z
     50c:	81 11       	cpse	r24, r1
     50e:	07 c0       	rjmp	.+14     	; 0x51e <prvResetNextTaskUnblockTime+0x1c>
     510:	8f ef       	ldi	r24, 0xFF	; 255
     512:	9f ef       	ldi	r25, 0xFF	; 255
     514:	90 93 18 07 	sts	0x0718, r25	; 0x800718 <xNextTaskUnblockTime+0x1>
     518:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <xNextTaskUnblockTime>
     51c:	08 95       	ret
     51e:	e0 91 38 07 	lds	r30, 0x0738	; 0x800738 <pxDelayedTaskList>
     522:	f0 91 39 07 	lds	r31, 0x0739	; 0x800739 <pxDelayedTaskList+0x1>
     526:	05 80       	ldd	r0, Z+5	; 0x05
     528:	f6 81       	ldd	r31, Z+6	; 0x06
     52a:	e0 2d       	mov	r30, r0
     52c:	80 81       	ld	r24, Z
     52e:	91 81       	ldd	r25, Z+1	; 0x01
     530:	90 93 18 07 	sts	0x0718, r25	; 0x800718 <xNextTaskUnblockTime+0x1>
     534:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <xNextTaskUnblockTime>
     538:	08 95       	ret

0000053a <prvDeleteTCB>:
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	ec 01       	movw	r28, r24
     540:	8f 89       	ldd	r24, Y+23	; 0x17
     542:	98 8d       	ldd	r25, Y+24	; 0x18
     544:	0e 94 80 02 	call	0x500	; 0x500 <vPortFree>
     548:	ce 01       	movw	r24, r28
     54a:	0e 94 80 02 	call	0x500	; 0x500 <vPortFree>
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <prvInitialiseNewTask>:
     554:	6f 92       	push	r6
     556:	7f 92       	push	r7
     558:	8f 92       	push	r8
     55a:	9f 92       	push	r9
     55c:	af 92       	push	r10
     55e:	bf 92       	push	r11
     560:	cf 92       	push	r12
     562:	df 92       	push	r13
     564:	ef 92       	push	r14
     566:	0f 93       	push	r16
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	4c 01       	movw	r8, r24
     574:	d5 01       	movw	r26, r10
     576:	57 96       	adiw	r26, 0x17	; 23
     578:	8d 91       	ld	r24, X+
     57a:	9c 91       	ld	r25, X
     57c:	58 97       	sbiw	r26, 0x18	; 24
     57e:	21 50       	subi	r18, 0x01	; 1
     580:	31 09       	sbc	r19, r1
     582:	3c 01       	movw	r6, r24
     584:	62 0e       	add	r6, r18
     586:	73 1e       	adc	r7, r19
     588:	61 15       	cp	r22, r1
     58a:	71 05       	cpc	r23, r1
     58c:	89 f4       	brne	.+34     	; 0x5b0 <prvInitialiseNewTask+0x5c>
     58e:	16 c0       	rjmp	.+44     	; 0x5bc <prvInitialiseNewTask+0x68>
     590:	82 2f       	mov	r24, r18
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	fb 01       	movw	r30, r22
     596:	e8 0f       	add	r30, r24
     598:	f9 1f       	adc	r31, r25
     59a:	30 81       	ld	r19, Z
     59c:	d5 01       	movw	r26, r10
     59e:	a8 0f       	add	r26, r24
     5a0:	b9 1f       	adc	r27, r25
     5a2:	59 96       	adiw	r26, 0x19	; 25
     5a4:	3c 93       	st	X, r19
     5a6:	80 81       	ld	r24, Z
     5a8:	88 23       	and	r24, r24
     5aa:	29 f0       	breq	.+10     	; 0x5b6 <prvInitialiseNewTask+0x62>
     5ac:	2f 5f       	subi	r18, 0xFF	; 255
     5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <prvInitialiseNewTask+0x5e>
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	28 30       	cpi	r18, 0x08	; 8
     5b4:	68 f3       	brcs	.-38     	; 0x590 <prvInitialiseNewTask+0x3c>
     5b6:	f5 01       	movw	r30, r10
     5b8:	10 a2       	std	Z+32, r1	; 0x20
     5ba:	03 c0       	rjmp	.+6      	; 0x5c2 <prvInitialiseNewTask+0x6e>
     5bc:	d5 01       	movw	r26, r10
     5be:	59 96       	adiw	r26, 0x19	; 25
     5c0:	1c 92       	st	X, r1
     5c2:	b3 e0       	ldi	r27, 0x03	; 3
     5c4:	be 15       	cp	r27, r14
     5c6:	20 f4       	brcc	.+8      	; 0x5d0 <prvInitialiseNewTask+0x7c>
     5c8:	0f 2e       	mov	r0, r31
     5ca:	f3 e0       	ldi	r31, 0x03	; 3
     5cc:	ef 2e       	mov	r14, r31
     5ce:	f0 2d       	mov	r31, r0
     5d0:	f5 01       	movw	r30, r10
     5d2:	e6 8a       	std	Z+22, r14	; 0x16
     5d4:	c5 01       	movw	r24, r10
     5d6:	02 96       	adiw	r24, 0x02	; 2
     5d8:	0e 94 88 00 	call	0x110	; 0x110 <vListInitialiseItem>
     5dc:	c5 01       	movw	r24, r10
     5de:	0c 96       	adiw	r24, 0x0c	; 12
     5e0:	0e 94 88 00 	call	0x110	; 0x110 <vListInitialiseItem>
     5e4:	d5 01       	movw	r26, r10
     5e6:	19 96       	adiw	r26, 0x09	; 9
     5e8:	bc 92       	st	X, r11
     5ea:	ae 92       	st	-X, r10
     5ec:	18 97       	sbiw	r26, 0x08	; 8
     5ee:	84 e0       	ldi	r24, 0x04	; 4
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	8e 19       	sub	r24, r14
     5f4:	91 09       	sbc	r25, r1
     5f6:	1d 96       	adiw	r26, 0x0d	; 13
     5f8:	9c 93       	st	X, r25
     5fa:	8e 93       	st	-X, r24
     5fc:	1c 97       	sbiw	r26, 0x0c	; 12
     5fe:	53 96       	adiw	r26, 0x13	; 19
     600:	bc 92       	st	X, r11
     602:	ae 92       	st	-X, r10
     604:	52 97       	sbiw	r26, 0x12	; 18
     606:	84 e0       	ldi	r24, 0x04	; 4
     608:	f5 01       	movw	r30, r10
     60a:	b1 96       	adiw	r30, 0x21	; 33
     60c:	df 01       	movw	r26, r30
     60e:	1d 92       	st	X+, r1
     610:	8a 95       	dec	r24
     612:	e9 f7       	brne	.-6      	; 0x60e <prvInitialiseNewTask+0xba>
     614:	f5 01       	movw	r30, r10
     616:	15 a2       	std	Z+37, r1	; 0x25
     618:	a8 01       	movw	r20, r16
     61a:	b4 01       	movw	r22, r8
     61c:	c3 01       	movw	r24, r6
     61e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <pxPortInitialiseStack>
     622:	d5 01       	movw	r26, r10
     624:	8d 93       	st	X+, r24
     626:	9c 93       	st	X, r25
     628:	c1 14       	cp	r12, r1
     62a:	d1 04       	cpc	r13, r1
     62c:	19 f0       	breq	.+6      	; 0x634 <prvInitialiseNewTask+0xe0>
     62e:	f6 01       	movw	r30, r12
     630:	b1 82       	std	Z+1, r11	; 0x01
     632:	a0 82       	st	Z, r10
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	0f 91       	pop	r16
     63c:	ef 90       	pop	r14
     63e:	df 90       	pop	r13
     640:	cf 90       	pop	r12
     642:	bf 90       	pop	r11
     644:	af 90       	pop	r10
     646:	9f 90       	pop	r9
     648:	8f 90       	pop	r8
     64a:	7f 90       	pop	r7
     64c:	6f 90       	pop	r6
     64e:	08 95       	ret

00000650 <prvInitialiseTaskLists>:
     650:	cf 93       	push	r28
     652:	c0 e0       	ldi	r28, 0x00	; 0
     654:	10 c0       	rjmp	.+32     	; 0x676 <prvInitialiseTaskLists+0x26>
     656:	8c 2f       	mov	r24, r28
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	9c 01       	movw	r18, r24
     65c:	22 0f       	add	r18, r18
     65e:	33 1f       	adc	r19, r19
     660:	22 0f       	add	r18, r18
     662:	33 1f       	adc	r19, r19
     664:	22 0f       	add	r18, r18
     666:	33 1f       	adc	r19, r19
     668:	82 0f       	add	r24, r18
     66a:	93 1f       	adc	r25, r19
     66c:	84 5b       	subi	r24, 0xB4	; 180
     66e:	98 4f       	sbci	r25, 0xF8	; 248
     670:	0e 94 7a 00 	call	0xf4	; 0xf4 <vListInitialise>
     674:	cf 5f       	subi	r28, 0xFF	; 255
     676:	c4 30       	cpi	r28, 0x04	; 4
     678:	70 f3       	brcs	.-36     	; 0x656 <prvInitialiseTaskLists+0x6>
     67a:	83 e4       	ldi	r24, 0x43	; 67
     67c:	97 e0       	ldi	r25, 0x07	; 7
     67e:	0e 94 7a 00 	call	0xf4	; 0xf4 <vListInitialise>
     682:	8a e3       	ldi	r24, 0x3A	; 58
     684:	97 e0       	ldi	r25, 0x07	; 7
     686:	0e 94 7a 00 	call	0xf4	; 0xf4 <vListInitialise>
     68a:	8d e2       	ldi	r24, 0x2D	; 45
     68c:	97 e0       	ldi	r25, 0x07	; 7
     68e:	0e 94 7a 00 	call	0xf4	; 0xf4 <vListInitialise>
     692:	84 e2       	ldi	r24, 0x24	; 36
     694:	97 e0       	ldi	r25, 0x07	; 7
     696:	0e 94 7a 00 	call	0xf4	; 0xf4 <vListInitialise>
     69a:	83 e4       	ldi	r24, 0x43	; 67
     69c:	97 e0       	ldi	r25, 0x07	; 7
     69e:	90 93 39 07 	sts	0x0739, r25	; 0x800739 <pxDelayedTaskList+0x1>
     6a2:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <pxDelayedTaskList>
     6a6:	8a e3       	ldi	r24, 0x3A	; 58
     6a8:	97 e0       	ldi	r25, 0x07	; 7
     6aa:	90 93 37 07 	sts	0x0737, r25	; 0x800737 <pxOverflowDelayedTaskList+0x1>
     6ae:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <pxOverflowDelayedTaskList>
     6b2:	cf 91       	pop	r28
     6b4:	08 95       	ret

000006b6 <prvAddNewTaskToReadyList>:
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	ec 01       	movw	r28, r24
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	0f 92       	push	r0
     6c2:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <uxCurrentNumberOfTasks>
     6c6:	8f 5f       	subi	r24, 0xFF	; 255
     6c8:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <uxCurrentNumberOfTasks>
     6cc:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <pxCurrentTCB>
     6d0:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <pxCurrentTCB+0x1>
     6d4:	89 2b       	or	r24, r25
     6d6:	59 f4       	brne	.+22     	; 0x6ee <prvAddNewTaskToReadyList+0x38>
     6d8:	d0 93 71 07 	sts	0x0771, r29	; 0x800771 <pxCurrentTCB+0x1>
     6dc:	c0 93 70 07 	sts	0x0770, r28	; 0x800770 <pxCurrentTCB>
     6e0:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <uxCurrentNumberOfTasks>
     6e4:	81 30       	cpi	r24, 0x01	; 1
     6e6:	99 f4       	brne	.+38     	; 0x70e <prvAddNewTaskToReadyList+0x58>
     6e8:	0e 94 28 03 	call	0x650	; 0x650 <prvInitialiseTaskLists>
     6ec:	10 c0       	rjmp	.+32     	; 0x70e <prvAddNewTaskToReadyList+0x58>
     6ee:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <xSchedulerRunning>
     6f2:	81 11       	cpse	r24, r1
     6f4:	0c c0       	rjmp	.+24     	; 0x70e <prvAddNewTaskToReadyList+0x58>
     6f6:	e0 91 70 07 	lds	r30, 0x0770	; 0x800770 <pxCurrentTCB>
     6fa:	f0 91 71 07 	lds	r31, 0x0771	; 0x800771 <pxCurrentTCB+0x1>
     6fe:	96 89       	ldd	r25, Z+22	; 0x16
     700:	8e 89       	ldd	r24, Y+22	; 0x16
     702:	89 17       	cp	r24, r25
     704:	20 f0       	brcs	.+8      	; 0x70e <prvAddNewTaskToReadyList+0x58>
     706:	d0 93 71 07 	sts	0x0771, r29	; 0x800771 <pxCurrentTCB+0x1>
     70a:	c0 93 70 07 	sts	0x0770, r28	; 0x800770 <pxCurrentTCB>
     70e:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxTaskNumber>
     712:	8f 5f       	subi	r24, 0xFF	; 255
     714:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <uxTaskNumber>
     718:	8e 89       	ldd	r24, Y+22	; 0x16
     71a:	90 91 1f 07 	lds	r25, 0x071F	; 0x80071f <uxTopReadyPriority>
     71e:	98 17       	cp	r25, r24
     720:	10 f4       	brcc	.+4      	; 0x726 <prvAddNewTaskToReadyList+0x70>
     722:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <uxTopReadyPriority>
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	fc 01       	movw	r30, r24
     72a:	ee 0f       	add	r30, r30
     72c:	ff 1f       	adc	r31, r31
     72e:	ee 0f       	add	r30, r30
     730:	ff 1f       	adc	r31, r31
     732:	ee 0f       	add	r30, r30
     734:	ff 1f       	adc	r31, r31
     736:	8e 0f       	add	r24, r30
     738:	9f 1f       	adc	r25, r31
     73a:	fc 01       	movw	r30, r24
     73c:	e4 5b       	subi	r30, 0xB4	; 180
     73e:	f8 4f       	sbci	r31, 0xF8	; 248
     740:	01 80       	ldd	r0, Z+1	; 0x01
     742:	f2 81       	ldd	r31, Z+2	; 0x02
     744:	e0 2d       	mov	r30, r0
     746:	fd 83       	std	Y+5, r31	; 0x05
     748:	ec 83       	std	Y+4, r30	; 0x04
     74a:	84 81       	ldd	r24, Z+4	; 0x04
     74c:	95 81       	ldd	r25, Z+5	; 0x05
     74e:	9f 83       	std	Y+7, r25	; 0x07
     750:	8e 83       	std	Y+6, r24	; 0x06
     752:	a4 81       	ldd	r26, Z+4	; 0x04
     754:	b5 81       	ldd	r27, Z+5	; 0x05
     756:	ce 01       	movw	r24, r28
     758:	02 96       	adiw	r24, 0x02	; 2
     75a:	13 96       	adiw	r26, 0x03	; 3
     75c:	9c 93       	st	X, r25
     75e:	8e 93       	st	-X, r24
     760:	12 97       	sbiw	r26, 0x02	; 2
     762:	95 83       	std	Z+5, r25	; 0x05
     764:	84 83       	std	Z+4, r24	; 0x04
     766:	ee 89       	ldd	r30, Y+22	; 0x16
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	cf 01       	movw	r24, r30
     76c:	88 0f       	add	r24, r24
     76e:	99 1f       	adc	r25, r25
     770:	88 0f       	add	r24, r24
     772:	99 1f       	adc	r25, r25
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	e8 0f       	add	r30, r24
     77a:	f9 1f       	adc	r31, r25
     77c:	e4 5b       	subi	r30, 0xB4	; 180
     77e:	f8 4f       	sbci	r31, 0xF8	; 248
     780:	fb 87       	std	Y+11, r31	; 0x0b
     782:	ea 87       	std	Y+10, r30	; 0x0a
     784:	80 81       	ld	r24, Z
     786:	8f 5f       	subi	r24, 0xFF	; 255
     788:	80 83       	st	Z, r24
     78a:	0f 90       	pop	r0
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <xSchedulerRunning>
     792:	88 23       	and	r24, r24
     794:	51 f0       	breq	.+20     	; 0x7aa <prvAddNewTaskToReadyList+0xf4>
     796:	e0 91 70 07 	lds	r30, 0x0770	; 0x800770 <pxCurrentTCB>
     79a:	f0 91 71 07 	lds	r31, 0x0771	; 0x800771 <pxCurrentTCB+0x1>
     79e:	96 89       	ldd	r25, Z+22	; 0x16
     7a0:	8e 89       	ldd	r24, Y+22	; 0x16
     7a2:	98 17       	cp	r25, r24
     7a4:	10 f4       	brcc	.+4      	; 0x7aa <prvAddNewTaskToReadyList+0xf4>
     7a6:	0e 94 93 01 	call	0x326	; 0x326 <vPortYield>
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <prvCheckTasksWaitingTermination>:
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	1c c0       	rjmp	.+56     	; 0x7ee <prvCheckTasksWaitingTermination+0x3e>
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	f8 94       	cli
     7ba:	0f 92       	push	r0
     7bc:	e0 91 29 07 	lds	r30, 0x0729	; 0x800729 <xTasksWaitingTermination+0x5>
     7c0:	f0 91 2a 07 	lds	r31, 0x072A	; 0x80072a <xTasksWaitingTermination+0x6>
     7c4:	c6 81       	ldd	r28, Z+6	; 0x06
     7c6:	d7 81       	ldd	r29, Z+7	; 0x07
     7c8:	ce 01       	movw	r24, r28
     7ca:	02 96       	adiw	r24, 0x02	; 2
     7cc:	0e 94 bd 00 	call	0x17a	; 0x17a <uxListRemove>
     7d0:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <uxCurrentNumberOfTasks>
     7d4:	81 50       	subi	r24, 0x01	; 1
     7d6:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <uxCurrentNumberOfTasks>
     7da:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <uxDeletedTasksWaitingCleanUp>
     7de:	81 50       	subi	r24, 0x01	; 1
     7e0:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <uxDeletedTasksWaitingCleanUp>
     7e4:	0f 90       	pop	r0
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	ce 01       	movw	r24, r28
     7ea:	0e 94 9d 02 	call	0x53a	; 0x53a <prvDeleteTCB>
     7ee:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <uxDeletedTasksWaitingCleanUp>
     7f2:	81 11       	cpse	r24, r1
     7f4:	e0 cf       	rjmp	.-64     	; 0x7b6 <prvCheckTasksWaitingTermination+0x6>
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <prvIdleTask>:
     7fc:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <prvCheckTasksWaitingTermination>
     800:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <pxReadyTasksLists>
     804:	82 30       	cpi	r24, 0x02	; 2
     806:	d0 f3       	brcs	.-12     	; 0x7fc <prvIdleTask>
     808:	0e 94 93 01 	call	0x326	; 0x326 <vPortYield>
     80c:	f7 cf       	rjmp	.-18     	; 0x7fc <prvIdleTask>

0000080e <prvAddCurrentTaskToDelayedList>:
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	ec 01       	movw	r28, r24
     818:	00 91 20 07 	lds	r16, 0x0720	; 0x800720 <xTickCount>
     81c:	10 91 21 07 	lds	r17, 0x0721	; 0x800721 <xTickCount+0x1>
     820:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <pxCurrentTCB>
     824:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <pxCurrentTCB+0x1>
     828:	02 96       	adiw	r24, 0x02	; 2
     82a:	0e 94 bd 00 	call	0x17a	; 0x17a <uxListRemove>
     82e:	c0 0f       	add	r28, r16
     830:	d1 1f       	adc	r29, r17
     832:	e0 91 70 07 	lds	r30, 0x0770	; 0x800770 <pxCurrentTCB>
     836:	f0 91 71 07 	lds	r31, 0x0771	; 0x800771 <pxCurrentTCB+0x1>
     83a:	d3 83       	std	Z+3, r29	; 0x03
     83c:	c2 83       	std	Z+2, r28	; 0x02
     83e:	c0 17       	cp	r28, r16
     840:	d1 07       	cpc	r29, r17
     842:	68 f4       	brcc	.+26     	; 0x85e <prvAddCurrentTaskToDelayedList+0x50>
     844:	60 91 70 07 	lds	r22, 0x0770	; 0x800770 <pxCurrentTCB>
     848:	70 91 71 07 	lds	r23, 0x0771	; 0x800771 <pxCurrentTCB+0x1>
     84c:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <pxOverflowDelayedTaskList>
     850:	90 91 37 07 	lds	r25, 0x0737	; 0x800737 <pxOverflowDelayedTaskList+0x1>
     854:	6e 5f       	subi	r22, 0xFE	; 254
     856:	7f 4f       	sbci	r23, 0xFF	; 255
     858:	0e 94 8c 00 	call	0x118	; 0x118 <vListInsert>
     85c:	17 c0       	rjmp	.+46     	; 0x88c <prvAddCurrentTaskToDelayedList+0x7e>
     85e:	60 91 70 07 	lds	r22, 0x0770	; 0x800770 <pxCurrentTCB>
     862:	70 91 71 07 	lds	r23, 0x0771	; 0x800771 <pxCurrentTCB+0x1>
     866:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <pxDelayedTaskList>
     86a:	90 91 39 07 	lds	r25, 0x0739	; 0x800739 <pxDelayedTaskList+0x1>
     86e:	6e 5f       	subi	r22, 0xFE	; 254
     870:	7f 4f       	sbci	r23, 0xFF	; 255
     872:	0e 94 8c 00 	call	0x118	; 0x118 <vListInsert>
     876:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <xNextTaskUnblockTime>
     87a:	90 91 18 07 	lds	r25, 0x0718	; 0x800718 <xNextTaskUnblockTime+0x1>
     87e:	c8 17       	cp	r28, r24
     880:	d9 07       	cpc	r29, r25
     882:	20 f4       	brcc	.+8      	; 0x88c <prvAddCurrentTaskToDelayedList+0x7e>
     884:	d0 93 18 07 	sts	0x0718, r29	; 0x800718 <xNextTaskUnblockTime+0x1>
     888:	c0 93 17 07 	sts	0x0717, r28	; 0x800717 <xNextTaskUnblockTime>
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	08 95       	ret

00000896 <xTaskCreate>:
     896:	2f 92       	push	r2
     898:	3f 92       	push	r3
     89a:	4f 92       	push	r4
     89c:	5f 92       	push	r5
     89e:	6f 92       	push	r6
     8a0:	7f 92       	push	r7
     8a2:	8f 92       	push	r8
     8a4:	9f 92       	push	r9
     8a6:	af 92       	push	r10
     8a8:	bf 92       	push	r11
     8aa:	cf 92       	push	r12
     8ac:	df 92       	push	r13
     8ae:	ef 92       	push	r14
     8b0:	ff 92       	push	r15
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	3c 01       	movw	r6, r24
     8bc:	1b 01       	movw	r2, r22
     8be:	5a 01       	movw	r10, r20
     8c0:	29 01       	movw	r4, r18
     8c2:	ca 01       	movw	r24, r20
     8c4:	0e 94 4b 02 	call	0x496	; 0x496 <pvPortMalloc>
     8c8:	6c 01       	movw	r12, r24
     8ca:	89 2b       	or	r24, r25
     8cc:	71 f0       	breq	.+28     	; 0x8ea <xTaskCreate+0x54>
     8ce:	86 e2       	ldi	r24, 0x26	; 38
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 4b 02 	call	0x496	; 0x496 <pvPortMalloc>
     8d6:	ec 01       	movw	r28, r24
     8d8:	89 2b       	or	r24, r25
     8da:	19 f0       	breq	.+6      	; 0x8e2 <xTaskCreate+0x4c>
     8dc:	d8 8e       	std	Y+24, r13	; 0x18
     8de:	cf 8a       	std	Y+23, r12	; 0x17
     8e0:	06 c0       	rjmp	.+12     	; 0x8ee <xTaskCreate+0x58>
     8e2:	c6 01       	movw	r24, r12
     8e4:	0e 94 80 02 	call	0x500	; 0x500 <vPortFree>
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <xTaskCreate+0x58>
     8ea:	c0 e0       	ldi	r28, 0x00	; 0
     8ec:	d0 e0       	ldi	r29, 0x00	; 0
     8ee:	20 97       	sbiw	r28, 0x00	; 0
     8f0:	91 f0       	breq	.+36     	; 0x916 <__stack+0x17>
     8f2:	95 01       	movw	r18, r10
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	81 2c       	mov	r8, r1
     8fa:	91 2c       	mov	r9, r1
     8fc:	5e 01       	movw	r10, r28
     8fe:	67 01       	movw	r12, r14
     900:	e0 2e       	mov	r14, r16
     902:	82 01       	movw	r16, r4
     904:	b1 01       	movw	r22, r2
     906:	c3 01       	movw	r24, r6
     908:	0e 94 aa 02 	call	0x554	; 0x554 <prvInitialiseNewTask>
     90c:	ce 01       	movw	r24, r28
     90e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <prvAddNewTaskToReadyList>
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	01 c0       	rjmp	.+2      	; 0x918 <__stack+0x19>
     916:	8f ef       	ldi	r24, 0xFF	; 255
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	ef 90       	pop	r14
     924:	df 90       	pop	r13
     926:	cf 90       	pop	r12
     928:	bf 90       	pop	r11
     92a:	af 90       	pop	r10
     92c:	9f 90       	pop	r9
     92e:	8f 90       	pop	r8
     930:	7f 90       	pop	r7
     932:	6f 90       	pop	r6
     934:	5f 90       	pop	r5
     936:	4f 90       	pop	r4
     938:	3f 90       	pop	r3
     93a:	2f 90       	pop	r2
     93c:	08 95       	ret

0000093e <vTaskStartScheduler>:
     93e:	ef 92       	push	r14
     940:	ff 92       	push	r15
     942:	0f 93       	push	r16
     944:	0f 2e       	mov	r0, r31
     946:	f5 e1       	ldi	r31, 0x15	; 21
     948:	ef 2e       	mov	r14, r31
     94a:	f7 e0       	ldi	r31, 0x07	; 7
     94c:	ff 2e       	mov	r15, r31
     94e:	f0 2d       	mov	r31, r0
     950:	00 e0       	ldi	r16, 0x00	; 0
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	45 e5       	ldi	r20, 0x55	; 85
     958:	50 e0       	ldi	r21, 0x00	; 0
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	71 e0       	ldi	r23, 0x01	; 1
     95e:	8e ef       	ldi	r24, 0xFE	; 254
     960:	93 e0       	ldi	r25, 0x03	; 3
     962:	0e 94 4b 04 	call	0x896	; 0x896 <xTaskCreate>
     966:	81 30       	cpi	r24, 0x01	; 1
     968:	81 f4       	brne	.+32     	; 0x98a <vTaskStartScheduler+0x4c>
     96a:	f8 94       	cli
     96c:	8f ef       	ldi	r24, 0xFF	; 255
     96e:	9f ef       	ldi	r25, 0xFF	; 255
     970:	90 93 18 07 	sts	0x0718, r25	; 0x800718 <xNextTaskUnblockTime+0x1>
     974:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <xNextTaskUnblockTime>
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <xSchedulerRunning>
     97e:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <xTickCount+0x1>
     982:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <xTickCount>
     986:	0e 94 64 01 	call	0x2c8	; 0x2c8 <xPortStartScheduler>
     98a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     98e:	0f 91       	pop	r16
     990:	ff 90       	pop	r15
     992:	ef 90       	pop	r14
     994:	08 95       	ret

00000996 <vTaskSuspendAll>:
     996:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxSchedulerSuspended>
     99a:	8f 5f       	subi	r24, 0xFF	; 255
     99c:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxSchedulerSuspended>
     9a0:	08 95       	ret

000009a2 <xTaskGetTickCount>:
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	0f 92       	push	r0
     9a8:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <xTickCount>
     9ac:	90 91 21 07 	lds	r25, 0x0721	; 0x800721 <xTickCount+0x1>
     9b0:	0f 90       	pop	r0
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	08 95       	ret

000009b6 <xTaskIncrementTick>:
     9b6:	0f 93       	push	r16
     9b8:	1f 93       	push	r17
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxSchedulerSuspended>
     9c2:	81 11       	cpse	r24, r1
     9c4:	01 c1       	rjmp	.+514    	; 0xbc8 <xTaskIncrementTick+0x212>
     9c6:	c0 91 20 07 	lds	r28, 0x0720	; 0x800720 <xTickCount>
     9ca:	d0 91 21 07 	lds	r29, 0x0721	; 0x800721 <xTickCount+0x1>
     9ce:	8e 01       	movw	r16, r28
     9d0:	0f 5f       	subi	r16, 0xFF	; 255
     9d2:	1f 4f       	sbci	r17, 0xFF	; 255
     9d4:	10 93 21 07 	sts	0x0721, r17	; 0x800721 <xTickCount+0x1>
     9d8:	00 93 20 07 	sts	0x0720, r16	; 0x800720 <xTickCount>
     9dc:	01 15       	cp	r16, r1
     9de:	11 05       	cpc	r17, r1
     9e0:	b9 f4       	brne	.+46     	; 0xa10 <xTaskIncrementTick+0x5a>
     9e2:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <pxDelayedTaskList>
     9e6:	90 91 39 07 	lds	r25, 0x0739	; 0x800739 <pxDelayedTaskList+0x1>
     9ea:	20 91 36 07 	lds	r18, 0x0736	; 0x800736 <pxOverflowDelayedTaskList>
     9ee:	30 91 37 07 	lds	r19, 0x0737	; 0x800737 <pxOverflowDelayedTaskList+0x1>
     9f2:	30 93 39 07 	sts	0x0739, r19	; 0x800739 <pxDelayedTaskList+0x1>
     9f6:	20 93 38 07 	sts	0x0738, r18	; 0x800738 <pxDelayedTaskList>
     9fa:	90 93 37 07 	sts	0x0737, r25	; 0x800737 <pxOverflowDelayedTaskList+0x1>
     9fe:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <pxOverflowDelayedTaskList>
     a02:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <xNumOfOverflows>
     a06:	8f 5f       	subi	r24, 0xFF	; 255
     a08:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <xNumOfOverflows>
     a0c:	0e 94 81 02 	call	0x502	; 0x502 <prvResetNextTaskUnblockTime>
     a10:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <xNextTaskUnblockTime>
     a14:	90 91 18 07 	lds	r25, 0x0718	; 0x800718 <xNextTaskUnblockTime+0x1>
     a18:	08 17       	cp	r16, r24
     a1a:	19 07       	cpc	r17, r25
     a1c:	20 f4       	brcc	.+8      	; 0xa26 <xTaskIncrementTick+0x70>
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	b8 c0       	rjmp	.+368    	; 0xb92 <xTaskIncrementTick+0x1dc>
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	01 c0       	rjmp	.+2      	; 0xa28 <xTaskIncrementTick+0x72>
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	e0 91 38 07 	lds	r30, 0x0738	; 0x800738 <pxDelayedTaskList>
     a2c:	f0 91 39 07 	lds	r31, 0x0739	; 0x800739 <pxDelayedTaskList+0x1>
     a30:	90 81       	ld	r25, Z
     a32:	91 11       	cpse	r25, r1
     a34:	07 c0       	rjmp	.+14     	; 0xa44 <xTaskIncrementTick+0x8e>
     a36:	2f ef       	ldi	r18, 0xFF	; 255
     a38:	3f ef       	ldi	r19, 0xFF	; 255
     a3a:	30 93 18 07 	sts	0x0718, r19	; 0x800718 <xNextTaskUnblockTime+0x1>
     a3e:	20 93 17 07 	sts	0x0717, r18	; 0x800717 <xNextTaskUnblockTime>
     a42:	a7 c0       	rjmp	.+334    	; 0xb92 <xTaskIncrementTick+0x1dc>
     a44:	e0 91 38 07 	lds	r30, 0x0738	; 0x800738 <pxDelayedTaskList>
     a48:	f0 91 39 07 	lds	r31, 0x0739	; 0x800739 <pxDelayedTaskList+0x1>
     a4c:	05 80       	ldd	r0, Z+5	; 0x05
     a4e:	f6 81       	ldd	r31, Z+6	; 0x06
     a50:	e0 2d       	mov	r30, r0
     a52:	06 80       	ldd	r0, Z+6	; 0x06
     a54:	f7 81       	ldd	r31, Z+7	; 0x07
     a56:	e0 2d       	mov	r30, r0
     a58:	22 81       	ldd	r18, Z+2	; 0x02
     a5a:	33 81       	ldd	r19, Z+3	; 0x03
     a5c:	02 17       	cp	r16, r18
     a5e:	13 07       	cpc	r17, r19
     a60:	28 f4       	brcc	.+10     	; 0xa6c <xTaskIncrementTick+0xb6>
     a62:	30 93 18 07 	sts	0x0718, r19	; 0x800718 <xNextTaskUnblockTime+0x1>
     a66:	20 93 17 07 	sts	0x0717, r18	; 0x800717 <xNextTaskUnblockTime>
     a6a:	93 c0       	rjmp	.+294    	; 0xb92 <xTaskIncrementTick+0x1dc>
     a6c:	a2 85       	ldd	r26, Z+10	; 0x0a
     a6e:	b3 85       	ldd	r27, Z+11	; 0x0b
     a70:	24 81       	ldd	r18, Z+4	; 0x04
     a72:	35 81       	ldd	r19, Z+5	; 0x05
     a74:	46 81       	ldd	r20, Z+6	; 0x06
     a76:	57 81       	ldd	r21, Z+7	; 0x07
     a78:	e9 01       	movw	r28, r18
     a7a:	5d 83       	std	Y+5, r21	; 0x05
     a7c:	4c 83       	std	Y+4, r20	; 0x04
     a7e:	26 81       	ldd	r18, Z+6	; 0x06
     a80:	37 81       	ldd	r19, Z+7	; 0x07
     a82:	44 81       	ldd	r20, Z+4	; 0x04
     a84:	55 81       	ldd	r21, Z+5	; 0x05
     a86:	e9 01       	movw	r28, r18
     a88:	5b 83       	std	Y+3, r21	; 0x03
     a8a:	4a 83       	std	Y+2, r20	; 0x02
     a8c:	11 96       	adiw	r26, 0x01	; 1
     a8e:	2d 91       	ld	r18, X+
     a90:	3c 91       	ld	r19, X
     a92:	12 97       	sbiw	r26, 0x02	; 2
     a94:	af 01       	movw	r20, r30
     a96:	4e 5f       	subi	r20, 0xFE	; 254
     a98:	5f 4f       	sbci	r21, 0xFF	; 255
     a9a:	24 17       	cp	r18, r20
     a9c:	35 07       	cpc	r19, r21
     a9e:	31 f4       	brne	.+12     	; 0xaac <xTaskIncrementTick+0xf6>
     aa0:	26 81       	ldd	r18, Z+6	; 0x06
     aa2:	37 81       	ldd	r19, Z+7	; 0x07
     aa4:	12 96       	adiw	r26, 0x02	; 2
     aa6:	3c 93       	st	X, r19
     aa8:	2e 93       	st	-X, r18
     aaa:	11 97       	sbiw	r26, 0x01	; 1
     aac:	13 86       	std	Z+11, r1	; 0x0b
     aae:	12 86       	std	Z+10, r1	; 0x0a
     ab0:	9c 91       	ld	r25, X
     ab2:	91 50       	subi	r25, 0x01	; 1
     ab4:	9c 93       	st	X, r25
     ab6:	a4 89       	ldd	r26, Z+20	; 0x14
     ab8:	b5 89       	ldd	r27, Z+21	; 0x15
     aba:	10 97       	sbiw	r26, 0x00	; 0
     abc:	19 f1       	breq	.+70     	; 0xb04 <xTaskIncrementTick+0x14e>
     abe:	26 85       	ldd	r18, Z+14	; 0x0e
     ac0:	37 85       	ldd	r19, Z+15	; 0x0f
     ac2:	60 89       	ldd	r22, Z+16	; 0x10
     ac4:	71 89       	ldd	r23, Z+17	; 0x11
     ac6:	e9 01       	movw	r28, r18
     ac8:	7d 83       	std	Y+5, r23	; 0x05
     aca:	6c 83       	std	Y+4, r22	; 0x04
     acc:	20 89       	ldd	r18, Z+16	; 0x10
     ace:	31 89       	ldd	r19, Z+17	; 0x11
     ad0:	66 85       	ldd	r22, Z+14	; 0x0e
     ad2:	77 85       	ldd	r23, Z+15	; 0x0f
     ad4:	e9 01       	movw	r28, r18
     ad6:	7b 83       	std	Y+3, r23	; 0x03
     ad8:	6a 83       	std	Y+2, r22	; 0x02
     ada:	11 96       	adiw	r26, 0x01	; 1
     adc:	6d 91       	ld	r22, X+
     ade:	7c 91       	ld	r23, X
     ae0:	12 97       	sbiw	r26, 0x02	; 2
     ae2:	9f 01       	movw	r18, r30
     ae4:	24 5f       	subi	r18, 0xF4	; 244
     ae6:	3f 4f       	sbci	r19, 0xFF	; 255
     ae8:	62 17       	cp	r22, r18
     aea:	73 07       	cpc	r23, r19
     aec:	31 f4       	brne	.+12     	; 0xafa <xTaskIncrementTick+0x144>
     aee:	20 89       	ldd	r18, Z+16	; 0x10
     af0:	31 89       	ldd	r19, Z+17	; 0x11
     af2:	12 96       	adiw	r26, 0x02	; 2
     af4:	3c 93       	st	X, r19
     af6:	2e 93       	st	-X, r18
     af8:	11 97       	sbiw	r26, 0x01	; 1
     afa:	15 8a       	std	Z+21, r1	; 0x15
     afc:	14 8a       	std	Z+20, r1	; 0x14
     afe:	9c 91       	ld	r25, X
     b00:	91 50       	subi	r25, 0x01	; 1
     b02:	9c 93       	st	X, r25
     b04:	26 89       	ldd	r18, Z+22	; 0x16
     b06:	90 91 1f 07 	lds	r25, 0x071F	; 0x80071f <uxTopReadyPriority>
     b0a:	92 17       	cp	r25, r18
     b0c:	10 f4       	brcc	.+4      	; 0xb12 <xTaskIncrementTick+0x15c>
     b0e:	20 93 1f 07 	sts	0x071F, r18	; 0x80071f <uxTopReadyPriority>
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	d9 01       	movw	r26, r18
     b16:	aa 0f       	add	r26, r26
     b18:	bb 1f       	adc	r27, r27
     b1a:	aa 0f       	add	r26, r26
     b1c:	bb 1f       	adc	r27, r27
     b1e:	aa 0f       	add	r26, r26
     b20:	bb 1f       	adc	r27, r27
     b22:	2a 0f       	add	r18, r26
     b24:	3b 1f       	adc	r19, r27
     b26:	d9 01       	movw	r26, r18
     b28:	a4 5b       	subi	r26, 0xB4	; 180
     b2a:	b8 4f       	sbci	r27, 0xF8	; 248
     b2c:	11 96       	adiw	r26, 0x01	; 1
     b2e:	0d 90       	ld	r0, X+
     b30:	bc 91       	ld	r27, X
     b32:	a0 2d       	mov	r26, r0
     b34:	b5 83       	std	Z+5, r27	; 0x05
     b36:	a4 83       	std	Z+4, r26	; 0x04
     b38:	14 96       	adiw	r26, 0x04	; 4
     b3a:	2d 91       	ld	r18, X+
     b3c:	3c 91       	ld	r19, X
     b3e:	15 97       	sbiw	r26, 0x05	; 5
     b40:	37 83       	std	Z+7, r19	; 0x07
     b42:	26 83       	std	Z+6, r18	; 0x06
     b44:	14 96       	adiw	r26, 0x04	; 4
     b46:	2d 91       	ld	r18, X+
     b48:	3c 91       	ld	r19, X
     b4a:	15 97       	sbiw	r26, 0x05	; 5
     b4c:	e9 01       	movw	r28, r18
     b4e:	5b 83       	std	Y+3, r21	; 0x03
     b50:	4a 83       	std	Y+2, r20	; 0x02
     b52:	15 96       	adiw	r26, 0x05	; 5
     b54:	5c 93       	st	X, r21
     b56:	4e 93       	st	-X, r20
     b58:	14 97       	sbiw	r26, 0x04	; 4
     b5a:	a6 89       	ldd	r26, Z+22	; 0x16
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	9d 01       	movw	r18, r26
     b60:	22 0f       	add	r18, r18
     b62:	33 1f       	adc	r19, r19
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	22 0f       	add	r18, r18
     b6a:	33 1f       	adc	r19, r19
     b6c:	a2 0f       	add	r26, r18
     b6e:	b3 1f       	adc	r27, r19
     b70:	a4 5b       	subi	r26, 0xB4	; 180
     b72:	b8 4f       	sbci	r27, 0xF8	; 248
     b74:	b3 87       	std	Z+11, r27	; 0x0b
     b76:	a2 87       	std	Z+10, r26	; 0x0a
     b78:	9c 91       	ld	r25, X
     b7a:	9f 5f       	subi	r25, 0xFF	; 255
     b7c:	9c 93       	st	X, r25
     b7e:	26 89       	ldd	r18, Z+22	; 0x16
     b80:	e0 91 70 07 	lds	r30, 0x0770	; 0x800770 <pxCurrentTCB>
     b84:	f0 91 71 07 	lds	r31, 0x0771	; 0x800771 <pxCurrentTCB+0x1>
     b88:	96 89       	ldd	r25, Z+22	; 0x16
     b8a:	29 17       	cp	r18, r25
     b8c:	08 f0       	brcs	.+2      	; 0xb90 <xTaskIncrementTick+0x1da>
     b8e:	49 cf       	rjmp	.-366    	; 0xa22 <xTaskIncrementTick+0x6c>
     b90:	4b cf       	rjmp	.-362    	; 0xa28 <xTaskIncrementTick+0x72>
     b92:	e0 91 70 07 	lds	r30, 0x0770	; 0x800770 <pxCurrentTCB>
     b96:	f0 91 71 07 	lds	r31, 0x0771	; 0x800771 <pxCurrentTCB+0x1>
     b9a:	26 89       	ldd	r18, Z+22	; 0x16
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	f9 01       	movw	r30, r18
     ba0:	ee 0f       	add	r30, r30
     ba2:	ff 1f       	adc	r31, r31
     ba4:	ee 0f       	add	r30, r30
     ba6:	ff 1f       	adc	r31, r31
     ba8:	ee 0f       	add	r30, r30
     baa:	ff 1f       	adc	r31, r31
     bac:	2e 0f       	add	r18, r30
     bae:	3f 1f       	adc	r19, r31
     bb0:	f9 01       	movw	r30, r18
     bb2:	e4 5b       	subi	r30, 0xB4	; 180
     bb4:	f8 4f       	sbci	r31, 0xF8	; 248
     bb6:	90 81       	ld	r25, Z
     bb8:	92 30       	cpi	r25, 0x02	; 2
     bba:	08 f0       	brcs	.+2      	; 0xbbe <xTaskIncrementTick+0x208>
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <xYieldPending>
     bc2:	91 11       	cpse	r25, r1
     bc4:	0c c0       	rjmp	.+24     	; 0xbde <xTaskIncrementTick+0x228>
     bc6:	0c c0       	rjmp	.+24     	; 0xbe0 <xTaskIncrementTick+0x22a>
     bc8:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <xPendedTicks>
     bcc:	90 91 1d 07 	lds	r25, 0x071D	; 0x80071d <xPendedTicks+0x1>
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	90 93 1d 07 	sts	0x071D, r25	; 0x80071d <xPendedTicks+0x1>
     bd6:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <xPendedTicks>
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <xTaskIncrementTick+0x22a>
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	08 95       	ret

00000bea <xTaskResumeAll>:
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	f8 94       	cli
     bf2:	0f 92       	push	r0
     bf4:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxSchedulerSuspended>
     bf8:	81 50       	subi	r24, 0x01	; 1
     bfa:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxSchedulerSuspended>
     bfe:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxSchedulerSuspended>
     c02:	81 11       	cpse	r24, r1
     c04:	bf c0       	rjmp	.+382    	; 0xd84 <xTaskResumeAll+0x19a>
     c06:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <uxCurrentNumberOfTasks>
     c0a:	81 11       	cpse	r24, r1
     c0c:	96 c0       	rjmp	.+300    	; 0xd3a <xTaskResumeAll+0x150>
     c0e:	bd c0       	rjmp	.+378    	; 0xd8a <xTaskResumeAll+0x1a0>
     c10:	e0 91 32 07 	lds	r30, 0x0732	; 0x800732 <xPendingReadyList+0x5>
     c14:	f0 91 33 07 	lds	r31, 0x0733	; 0x800733 <xPendingReadyList+0x6>
     c18:	06 80       	ldd	r0, Z+6	; 0x06
     c1a:	f7 81       	ldd	r31, Z+7	; 0x07
     c1c:	e0 2d       	mov	r30, r0
     c1e:	a4 89       	ldd	r26, Z+20	; 0x14
     c20:	b5 89       	ldd	r27, Z+21	; 0x15
     c22:	c6 85       	ldd	r28, Z+14	; 0x0e
     c24:	d7 85       	ldd	r29, Z+15	; 0x0f
     c26:	80 89       	ldd	r24, Z+16	; 0x10
     c28:	91 89       	ldd	r25, Z+17	; 0x11
     c2a:	9d 83       	std	Y+5, r25	; 0x05
     c2c:	8c 83       	std	Y+4, r24	; 0x04
     c2e:	c0 89       	ldd	r28, Z+16	; 0x10
     c30:	d1 89       	ldd	r29, Z+17	; 0x11
     c32:	86 85       	ldd	r24, Z+14	; 0x0e
     c34:	97 85       	ldd	r25, Z+15	; 0x0f
     c36:	9b 83       	std	Y+3, r25	; 0x03
     c38:	8a 83       	std	Y+2, r24	; 0x02
     c3a:	11 96       	adiw	r26, 0x01	; 1
     c3c:	2d 91       	ld	r18, X+
     c3e:	3c 91       	ld	r19, X
     c40:	12 97       	sbiw	r26, 0x02	; 2
     c42:	cf 01       	movw	r24, r30
     c44:	0c 96       	adiw	r24, 0x0c	; 12
     c46:	28 17       	cp	r18, r24
     c48:	39 07       	cpc	r19, r25
     c4a:	31 f4       	brne	.+12     	; 0xc58 <xTaskResumeAll+0x6e>
     c4c:	80 89       	ldd	r24, Z+16	; 0x10
     c4e:	91 89       	ldd	r25, Z+17	; 0x11
     c50:	12 96       	adiw	r26, 0x02	; 2
     c52:	9c 93       	st	X, r25
     c54:	8e 93       	st	-X, r24
     c56:	11 97       	sbiw	r26, 0x01	; 1
     c58:	15 8a       	std	Z+21, r1	; 0x15
     c5a:	14 8a       	std	Z+20, r1	; 0x14
     c5c:	8c 91       	ld	r24, X
     c5e:	81 50       	subi	r24, 0x01	; 1
     c60:	8c 93       	st	X, r24
     c62:	a2 85       	ldd	r26, Z+10	; 0x0a
     c64:	b3 85       	ldd	r27, Z+11	; 0x0b
     c66:	c4 81       	ldd	r28, Z+4	; 0x04
     c68:	d5 81       	ldd	r29, Z+5	; 0x05
     c6a:	86 81       	ldd	r24, Z+6	; 0x06
     c6c:	97 81       	ldd	r25, Z+7	; 0x07
     c6e:	9d 83       	std	Y+5, r25	; 0x05
     c70:	8c 83       	std	Y+4, r24	; 0x04
     c72:	c6 81       	ldd	r28, Z+6	; 0x06
     c74:	d7 81       	ldd	r29, Z+7	; 0x07
     c76:	84 81       	ldd	r24, Z+4	; 0x04
     c78:	95 81       	ldd	r25, Z+5	; 0x05
     c7a:	9b 83       	std	Y+3, r25	; 0x03
     c7c:	8a 83       	std	Y+2, r24	; 0x02
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	8d 91       	ld	r24, X+
     c82:	9c 91       	ld	r25, X
     c84:	12 97       	sbiw	r26, 0x02	; 2
     c86:	9f 01       	movw	r18, r30
     c88:	2e 5f       	subi	r18, 0xFE	; 254
     c8a:	3f 4f       	sbci	r19, 0xFF	; 255
     c8c:	82 17       	cp	r24, r18
     c8e:	93 07       	cpc	r25, r19
     c90:	31 f4       	brne	.+12     	; 0xc9e <xTaskResumeAll+0xb4>
     c92:	86 81       	ldd	r24, Z+6	; 0x06
     c94:	97 81       	ldd	r25, Z+7	; 0x07
     c96:	12 96       	adiw	r26, 0x02	; 2
     c98:	9c 93       	st	X, r25
     c9a:	8e 93       	st	-X, r24
     c9c:	11 97       	sbiw	r26, 0x01	; 1
     c9e:	13 86       	std	Z+11, r1	; 0x0b
     ca0:	12 86       	std	Z+10, r1	; 0x0a
     ca2:	8c 91       	ld	r24, X
     ca4:	81 50       	subi	r24, 0x01	; 1
     ca6:	8c 93       	st	X, r24
     ca8:	86 89       	ldd	r24, Z+22	; 0x16
     caa:	90 91 1f 07 	lds	r25, 0x071F	; 0x80071f <uxTopReadyPriority>
     cae:	98 17       	cp	r25, r24
     cb0:	10 f4       	brcc	.+4      	; 0xcb6 <xTaskResumeAll+0xcc>
     cb2:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <uxTopReadyPriority>
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	dc 01       	movw	r26, r24
     cba:	aa 0f       	add	r26, r26
     cbc:	bb 1f       	adc	r27, r27
     cbe:	aa 0f       	add	r26, r26
     cc0:	bb 1f       	adc	r27, r27
     cc2:	aa 0f       	add	r26, r26
     cc4:	bb 1f       	adc	r27, r27
     cc6:	8a 0f       	add	r24, r26
     cc8:	9b 1f       	adc	r25, r27
     cca:	dc 01       	movw	r26, r24
     ccc:	a4 5b       	subi	r26, 0xB4	; 180
     cce:	b8 4f       	sbci	r27, 0xF8	; 248
     cd0:	11 96       	adiw	r26, 0x01	; 1
     cd2:	0d 90       	ld	r0, X+
     cd4:	bc 91       	ld	r27, X
     cd6:	a0 2d       	mov	r26, r0
     cd8:	b5 83       	std	Z+5, r27	; 0x05
     cda:	a4 83       	std	Z+4, r26	; 0x04
     cdc:	14 96       	adiw	r26, 0x04	; 4
     cde:	8d 91       	ld	r24, X+
     ce0:	9c 91       	ld	r25, X
     ce2:	15 97       	sbiw	r26, 0x05	; 5
     ce4:	97 83       	std	Z+7, r25	; 0x07
     ce6:	86 83       	std	Z+6, r24	; 0x06
     ce8:	14 96       	adiw	r26, 0x04	; 4
     cea:	cd 91       	ld	r28, X+
     cec:	dc 91       	ld	r29, X
     cee:	15 97       	sbiw	r26, 0x05	; 5
     cf0:	3b 83       	std	Y+3, r19	; 0x03
     cf2:	2a 83       	std	Y+2, r18	; 0x02
     cf4:	15 96       	adiw	r26, 0x05	; 5
     cf6:	3c 93       	st	X, r19
     cf8:	2e 93       	st	-X, r18
     cfa:	14 97       	sbiw	r26, 0x04	; 4
     cfc:	a6 89       	ldd	r26, Z+22	; 0x16
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	cd 01       	movw	r24, r26
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	88 0f       	add	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	a8 0f       	add	r26, r24
     d10:	b9 1f       	adc	r27, r25
     d12:	a4 5b       	subi	r26, 0xB4	; 180
     d14:	b8 4f       	sbci	r27, 0xF8	; 248
     d16:	b3 87       	std	Z+11, r27	; 0x0b
     d18:	a2 87       	std	Z+10, r26	; 0x0a
     d1a:	8c 91       	ld	r24, X
     d1c:	8f 5f       	subi	r24, 0xFF	; 255
     d1e:	8c 93       	st	X, r24
     d20:	96 89       	ldd	r25, Z+22	; 0x16
     d22:	a0 91 70 07 	lds	r26, 0x0770	; 0x800770 <pxCurrentTCB>
     d26:	b0 91 71 07 	lds	r27, 0x0771	; 0x800771 <pxCurrentTCB+0x1>
     d2a:	56 96       	adiw	r26, 0x16	; 22
     d2c:	8c 91       	ld	r24, X
     d2e:	98 17       	cp	r25, r24
     d30:	30 f0       	brcs	.+12     	; 0xd3e <xTaskResumeAll+0x154>
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <xYieldPending>
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <xTaskResumeAll+0x154>
     d3a:	e0 e0       	ldi	r30, 0x00	; 0
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <xPendingReadyList>
     d42:	81 11       	cpse	r24, r1
     d44:	65 cf       	rjmp	.-310    	; 0xc10 <xTaskResumeAll+0x26>
     d46:	ef 2b       	or	r30, r31
     d48:	11 f0       	breq	.+4      	; 0xd4e <xTaskResumeAll+0x164>
     d4a:	0e 94 81 02 	call	0x502	; 0x502 <prvResetNextTaskUnblockTime>
     d4e:	c0 91 1c 07 	lds	r28, 0x071C	; 0x80071c <xPendedTicks>
     d52:	d0 91 1d 07 	lds	r29, 0x071D	; 0x80071d <xPendedTicks+0x1>
     d56:	20 97       	sbiw	r28, 0x00	; 0
     d58:	69 f0       	breq	.+26     	; 0xd74 <xTaskResumeAll+0x18a>
     d5a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <xTaskIncrementTick>
     d5e:	88 23       	and	r24, r24
     d60:	19 f0       	breq	.+6      	; 0xd68 <xTaskResumeAll+0x17e>
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <xYieldPending>
     d68:	21 97       	sbiw	r28, 0x01	; 1
     d6a:	b9 f7       	brne	.-18     	; 0xd5a <xTaskResumeAll+0x170>
     d6c:	10 92 1d 07 	sts	0x071D, r1	; 0x80071d <xPendedTicks+0x1>
     d70:	10 92 1c 07 	sts	0x071C, r1	; 0x80071c <xPendedTicks>
     d74:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <xYieldPending>
     d78:	88 23       	and	r24, r24
     d7a:	31 f0       	breq	.+12     	; 0xd88 <xTaskResumeAll+0x19e>
     d7c:	0e 94 93 01 	call	0x326	; 0x326 <vPortYield>
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	03 c0       	rjmp	.+6      	; 0xd8a <xTaskResumeAll+0x1a0>
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	01 c0       	rjmp	.+2      	; 0xd8a <xTaskResumeAll+0x1a0>
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	0f 90       	pop	r0
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	08 95       	ret

00000d94 <xTaskDelayUntil>:
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	8c 01       	movw	r16, r24
     d9e:	eb 01       	movw	r28, r22
     da0:	0e 94 cb 04 	call	0x996	; 0x996 <vTaskSuspendAll>
     da4:	40 91 20 07 	lds	r20, 0x0720	; 0x800720 <xTickCount>
     da8:	50 91 21 07 	lds	r21, 0x0721	; 0x800721 <xTickCount+0x1>
     dac:	f8 01       	movw	r30, r16
     dae:	20 81       	ld	r18, Z
     db0:	31 81       	ldd	r19, Z+1	; 0x01
     db2:	c9 01       	movw	r24, r18
     db4:	8c 0f       	add	r24, r28
     db6:	9d 1f       	adc	r25, r29
     db8:	42 17       	cp	r20, r18
     dba:	53 07       	cpc	r21, r19
     dbc:	40 f4       	brcc	.+16     	; 0xdce <xTaskDelayUntil+0x3a>
     dbe:	82 17       	cp	r24, r18
     dc0:	93 07       	cpc	r25, r19
     dc2:	68 f4       	brcc	.+26     	; 0xdde <xTaskDelayUntil+0x4a>
     dc4:	48 17       	cp	r20, r24
     dc6:	59 07       	cpc	r21, r25
     dc8:	60 f0       	brcs	.+24     	; 0xde2 <xTaskDelayUntil+0x4e>
     dca:	c0 e0       	ldi	r28, 0x00	; 0
     dcc:	0f c0       	rjmp	.+30     	; 0xdec <xTaskDelayUntil+0x58>
     dce:	82 17       	cp	r24, r18
     dd0:	93 07       	cpc	r25, r19
     dd2:	48 f0       	brcs	.+18     	; 0xde6 <xTaskDelayUntil+0x52>
     dd4:	48 17       	cp	r20, r24
     dd6:	59 07       	cpc	r21, r25
     dd8:	40 f0       	brcs	.+16     	; 0xdea <xTaskDelayUntil+0x56>
     dda:	c0 e0       	ldi	r28, 0x00	; 0
     ddc:	07 c0       	rjmp	.+14     	; 0xdec <xTaskDelayUntil+0x58>
     dde:	c0 e0       	ldi	r28, 0x00	; 0
     de0:	05 c0       	rjmp	.+10     	; 0xdec <xTaskDelayUntil+0x58>
     de2:	c1 e0       	ldi	r28, 0x01	; 1
     de4:	03 c0       	rjmp	.+6      	; 0xdec <xTaskDelayUntil+0x58>
     de6:	c1 e0       	ldi	r28, 0x01	; 1
     de8:	01 c0       	rjmp	.+2      	; 0xdec <xTaskDelayUntil+0x58>
     dea:	c1 e0       	ldi	r28, 0x01	; 1
     dec:	f8 01       	movw	r30, r16
     dee:	91 83       	std	Z+1, r25	; 0x01
     df0:	80 83       	st	Z, r24
     df2:	cc 23       	and	r28, r28
     df4:	29 f0       	breq	.+10     	; 0xe00 <xTaskDelayUntil+0x6c>
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	84 1b       	sub	r24, r20
     dfa:	95 0b       	sbc	r25, r21
     dfc:	0e 94 07 04 	call	0x80e	; 0x80e <prvAddCurrentTaskToDelayedList>
     e00:	0e 94 f5 05 	call	0xbea	; 0xbea <xTaskResumeAll>
     e04:	81 11       	cpse	r24, r1
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <xTaskDelayUntil+0x78>
     e08:	0e 94 93 01 	call	0x326	; 0x326 <vPortYield>
     e0c:	8c 2f       	mov	r24, r28
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	08 95       	ret

00000e18 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     e18:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxSchedulerSuspended>
     e1c:	88 23       	and	r24, r24
     e1e:	21 f0       	breq	.+8      	; 0xe28 <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <xYieldPending>
     e26:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
     e28:	10 92 1b 07 	sts	0x071B, r1	; 0x80071b <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     e2c:	20 91 1f 07 	lds	r18, 0x071F	; 0x80071f <uxTopReadyPriority>
     e30:	01 c0       	rjmp	.+2      	; 0xe34 <vTaskSwitchContext+0x1c>
     e32:	21 50       	subi	r18, 0x01	; 1
     e34:	82 2f       	mov	r24, r18
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	fc 01       	movw	r30, r24
     e3a:	ee 0f       	add	r30, r30
     e3c:	ff 1f       	adc	r31, r31
     e3e:	ee 0f       	add	r30, r30
     e40:	ff 1f       	adc	r31, r31
     e42:	ee 0f       	add	r30, r30
     e44:	ff 1f       	adc	r31, r31
     e46:	e8 0f       	add	r30, r24
     e48:	f9 1f       	adc	r31, r25
     e4a:	e4 5b       	subi	r30, 0xB4	; 180
     e4c:	f8 4f       	sbci	r31, 0xF8	; 248
     e4e:	30 81       	ld	r19, Z
     e50:	33 23       	and	r19, r19
     e52:	79 f3       	breq	.-34     	; 0xe32 <vTaskSwitchContext+0x1a>
     e54:	ac 01       	movw	r20, r24
     e56:	44 0f       	add	r20, r20
     e58:	55 1f       	adc	r21, r21
     e5a:	44 0f       	add	r20, r20
     e5c:	55 1f       	adc	r21, r21
     e5e:	44 0f       	add	r20, r20
     e60:	55 1f       	adc	r21, r21
     e62:	48 0f       	add	r20, r24
     e64:	59 1f       	adc	r21, r25
     e66:	df 01       	movw	r26, r30
     e68:	01 80       	ldd	r0, Z+1	; 0x01
     e6a:	f2 81       	ldd	r31, Z+2	; 0x02
     e6c:	e0 2d       	mov	r30, r0
     e6e:	02 80       	ldd	r0, Z+2	; 0x02
     e70:	f3 81       	ldd	r31, Z+3	; 0x03
     e72:	e0 2d       	mov	r30, r0
     e74:	12 96       	adiw	r26, 0x02	; 2
     e76:	fc 93       	st	X, r31
     e78:	ee 93       	st	-X, r30
     e7a:	11 97       	sbiw	r26, 0x01	; 1
     e7c:	41 5b       	subi	r20, 0xB1	; 177
     e7e:	58 4f       	sbci	r21, 0xF8	; 248
     e80:	e4 17       	cp	r30, r20
     e82:	f5 07       	cpc	r31, r21
     e84:	29 f4       	brne	.+10     	; 0xe90 <vTaskSwitchContext+0x78>
     e86:	42 81       	ldd	r20, Z+2	; 0x02
     e88:	53 81       	ldd	r21, Z+3	; 0x03
     e8a:	fd 01       	movw	r30, r26
     e8c:	52 83       	std	Z+2, r21	; 0x02
     e8e:	41 83       	std	Z+1, r20	; 0x01
     e90:	fc 01       	movw	r30, r24
     e92:	ee 0f       	add	r30, r30
     e94:	ff 1f       	adc	r31, r31
     e96:	ee 0f       	add	r30, r30
     e98:	ff 1f       	adc	r31, r31
     e9a:	ee 0f       	add	r30, r30
     e9c:	ff 1f       	adc	r31, r31
     e9e:	8e 0f       	add	r24, r30
     ea0:	9f 1f       	adc	r25, r31
     ea2:	fc 01       	movw	r30, r24
     ea4:	e4 5b       	subi	r30, 0xB4	; 180
     ea6:	f8 4f       	sbci	r31, 0xF8	; 248
     ea8:	01 80       	ldd	r0, Z+1	; 0x01
     eaa:	f2 81       	ldd	r31, Z+2	; 0x02
     eac:	e0 2d       	mov	r30, r0
     eae:	86 81       	ldd	r24, Z+6	; 0x06
     eb0:	97 81       	ldd	r25, Z+7	; 0x07
     eb2:	90 93 71 07 	sts	0x0771, r25	; 0x800771 <pxCurrentTCB+0x1>
     eb6:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <pxCurrentTCB>
     eba:	20 93 1f 07 	sts	0x071F, r18	; 0x80071f <uxTopReadyPriority>
     ebe:	08 95       	ret

00000ec0 <_Z6ioInitv>:

		default:
			return 0;
			break;
	}
}
     ec0:	8a b1       	in	r24, 0x0a	; 10
     ec2:	80 64       	ori	r24, 0x40	; 64
     ec4:	8a b9       	out	0x0a, r24	; 10
     ec6:	84 b1       	in	r24, 0x04	; 4
     ec8:	84 60       	ori	r24, 0x04	; 4
     eca:	84 b9       	out	0x04, r24	; 4
     ecc:	84 b1       	in	r24, 0x04	; 4
     ece:	88 60       	ori	r24, 0x08	; 8
     ed0:	84 b9       	out	0x04, r24	; 4
     ed2:	84 b1       	in	r24, 0x04	; 4
     ed4:	82 60       	ori	r24, 0x02	; 2
     ed6:	84 b9       	out	0x04, r24	; 4
     ed8:	8a b1       	in	r24, 0x0a	; 10
     eda:	80 68       	ori	r24, 0x80	; 128
     edc:	8a b9       	out	0x0a, r24	; 10
     ede:	84 b1       	in	r24, 0x04	; 4
     ee0:	80 62       	ori	r24, 0x20	; 32
     ee2:	84 b9       	out	0x04, r24	; 4
     ee4:	84 b1       	in	r24, 0x04	; 4
     ee6:	81 60       	ori	r24, 0x01	; 1
     ee8:	84 b9       	out	0x04, r24	; 4
     eea:	87 b1       	in	r24, 0x07	; 7
     eec:	84 60       	ori	r24, 0x04	; 4
     eee:	87 b9       	out	0x07, r24	; 7
     ef0:	8b b1       	in	r24, 0x0b	; 11
     ef2:	8f 7b       	andi	r24, 0xBF	; 191
     ef4:	8b b9       	out	0x0b, r24	; 11
     ef6:	85 b1       	in	r24, 0x05	; 5
     ef8:	8b 7f       	andi	r24, 0xFB	; 251
     efa:	85 b9       	out	0x05, r24	; 5
     efc:	85 b1       	in	r24, 0x05	; 5
     efe:	87 7f       	andi	r24, 0xF7	; 247
     f00:	85 b9       	out	0x05, r24	; 5
     f02:	85 b1       	in	r24, 0x05	; 5
     f04:	8d 7f       	andi	r24, 0xFD	; 253
     f06:	85 b9       	out	0x05, r24	; 5
     f08:	8b b1       	in	r24, 0x0b	; 11
     f0a:	8f 77       	andi	r24, 0x7F	; 127
     f0c:	8b b9       	out	0x0b, r24	; 11
     f0e:	85 b1       	in	r24, 0x05	; 5
     f10:	8f 7d       	andi	r24, 0xDF	; 223
     f12:	85 b9       	out	0x05, r24	; 5
     f14:	85 b1       	in	r24, 0x05	; 5
     f16:	8e 7f       	andi	r24, 0xFE	; 254
     f18:	85 b9       	out	0x05, r24	; 5
     f1a:	88 b1       	in	r24, 0x08	; 8
     f1c:	88 60       	ori	r24, 0x08	; 8
     f1e:	88 b9       	out	0x08, r24	; 8
     f20:	88 b1       	in	r24, 0x08	; 8
     f22:	8b 7f       	andi	r24, 0xFB	; 251
     f24:	88 b9       	out	0x08, r24	; 8
     f26:	8a b1       	in	r24, 0x0a	; 10
     f28:	8b 7f       	andi	r24, 0xFB	; 251
     f2a:	8a b9       	out	0x0a, r24	; 10
     f2c:	8a b1       	in	r24, 0x0a	; 10
     f2e:	8f 7d       	andi	r24, 0xDF	; 223
     f30:	8a b9       	out	0x0a, r24	; 10
     f32:	8a b1       	in	r24, 0x0a	; 10
     f34:	87 7f       	andi	r24, 0xF7	; 247
     f36:	8a b9       	out	0x0a, r24	; 10
     f38:	8a b1       	in	r24, 0x0a	; 10
     f3a:	8f 7e       	andi	r24, 0xEF	; 239
     f3c:	8a b9       	out	0x0a, r24	; 10
     f3e:	87 b1       	in	r24, 0x07	; 7
     f40:	8e 7f       	andi	r24, 0xFE	; 254
     f42:	87 b9       	out	0x07, r24	; 7
     f44:	84 b1       	in	r24, 0x04	; 4
     f46:	8f 7e       	andi	r24, 0xEF	; 239
     f48:	84 b9       	out	0x04, r24	; 4
     f4a:	87 b1       	in	r24, 0x07	; 7
     f4c:	8d 7f       	andi	r24, 0xFD	; 253
     f4e:	87 b9       	out	0x07, r24	; 7
     f50:	08 95       	ret

00000f52 <_Z13digitalOutputhb>:

void digitalOutput(uint8_t pin, bool state)
{
	switch (pin)
     f52:	83 30       	cpi	r24, 0x03	; 3
     f54:	01 f1       	breq	.+64     	; 0xf96 <_Z13digitalOutputhb+0x44>
     f56:	28 f4       	brcc	.+10     	; 0xf62 <_Z13digitalOutputhb+0x10>
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	49 f0       	breq	.+18     	; 0xf6e <_Z13digitalOutputhb+0x1c>
     f5c:	82 30       	cpi	r24, 0x02	; 2
     f5e:	89 f0       	breq	.+34     	; 0xf82 <_Z13digitalOutputhb+0x30>
     f60:	08 95       	ret
     f62:	85 30       	cpi	r24, 0x05	; 5
     f64:	61 f1       	breq	.+88     	; 0xfbe <_Z13digitalOutputhb+0x6c>
     f66:	08 f1       	brcs	.+66     	; 0xfaa <_Z13digitalOutputhb+0x58>
     f68:	86 30       	cpi	r24, 0x06	; 6
     f6a:	99 f1       	breq	.+102    	; 0xfd2 <_Z13digitalOutputhb+0x80>
     f6c:	08 95       	ret
	{
		case 1:
			if (state)
     f6e:	66 23       	and	r22, r22
     f70:	21 f0       	breq	.+8      	; 0xf7a <_Z13digitalOutputhb+0x28>
				DO1_ON;
     f72:	8b b1       	in	r24, 0x0b	; 11
     f74:	80 64       	ori	r24, 0x40	; 64
     f76:	8b b9       	out	0x0b, r24	; 11
     f78:	08 95       	ret
			else
				DO1_OFF;
     f7a:	8b b1       	in	r24, 0x0b	; 11
     f7c:	8f 7b       	andi	r24, 0xBF	; 191
     f7e:	8b b9       	out	0x0b, r24	; 11
     f80:	08 95       	ret
			break;

		case 2:
			if (state)
     f82:	66 23       	and	r22, r22
     f84:	21 f0       	breq	.+8      	; 0xf8e <_Z13digitalOutputhb+0x3c>
				DO2_ON;
     f86:	85 b1       	in	r24, 0x05	; 5
     f88:	84 60       	ori	r24, 0x04	; 4
     f8a:	85 b9       	out	0x05, r24	; 5
     f8c:	08 95       	ret
			else
				DO2_OFF;
     f8e:	85 b1       	in	r24, 0x05	; 5
     f90:	8b 7f       	andi	r24, 0xFB	; 251
     f92:	85 b9       	out	0x05, r24	; 5
     f94:	08 95       	ret
			break;

		case 3:
			if (state)
     f96:	66 23       	and	r22, r22
     f98:	21 f0       	breq	.+8      	; 0xfa2 <_Z13digitalOutputhb+0x50>
				DO3_ON;
     f9a:	85 b1       	in	r24, 0x05	; 5
     f9c:	88 60       	ori	r24, 0x08	; 8
     f9e:	85 b9       	out	0x05, r24	; 5
     fa0:	08 95       	ret
			else
				DO3_OFF;
     fa2:	85 b1       	in	r24, 0x05	; 5
     fa4:	87 7f       	andi	r24, 0xF7	; 247
     fa6:	85 b9       	out	0x05, r24	; 5
     fa8:	08 95       	ret
			break;

		case 4:
			if (state)
     faa:	66 23       	and	r22, r22
     fac:	21 f0       	breq	.+8      	; 0xfb6 <_Z13digitalOutputhb+0x64>
				DO4_ON;
     fae:	85 b1       	in	r24, 0x05	; 5
     fb0:	82 60       	ori	r24, 0x02	; 2
     fb2:	85 b9       	out	0x05, r24	; 5
     fb4:	08 95       	ret
			else
				DO4_OFF;
     fb6:	85 b1       	in	r24, 0x05	; 5
     fb8:	8d 7f       	andi	r24, 0xFD	; 253
     fba:	85 b9       	out	0x05, r24	; 5
     fbc:	08 95       	ret
			break;
		
		case 5:
			if (state)
     fbe:	66 23       	and	r22, r22
     fc0:	21 f0       	breq	.+8      	; 0xfca <_Z13digitalOutputhb+0x78>
				DO5_ON;
     fc2:	8b b1       	in	r24, 0x0b	; 11
     fc4:	80 68       	ori	r24, 0x80	; 128
     fc6:	8b b9       	out	0x0b, r24	; 11
     fc8:	08 95       	ret
			else
				DO5_OFF;
     fca:	8b b1       	in	r24, 0x0b	; 11
     fcc:	8f 77       	andi	r24, 0x7F	; 127
     fce:	8b b9       	out	0x0b, r24	; 11
     fd0:	08 95       	ret
			break;

		case 6:
			if (state)
     fd2:	66 23       	and	r22, r22
     fd4:	21 f0       	breq	.+8      	; 0xfde <_Z13digitalOutputhb+0x8c>
				DO6_ON;
     fd6:	85 b1       	in	r24, 0x05	; 5
     fd8:	80 62       	ori	r24, 0x20	; 32
     fda:	85 b9       	out	0x05, r24	; 5
     fdc:	08 95       	ret
			else
				DO6_OFF;
     fde:	85 b1       	in	r24, 0x05	; 5
     fe0:	8f 7d       	andi	r24, 0xDF	; 223
     fe2:	85 b9       	out	0x05, r24	; 5
     fe4:	08 95       	ret

00000fe6 <_Z17readDigitalOutputh>:
	}
}

bool readDigitalOutput(uint8_t pin)
{
	switch (pin)
     fe6:	83 30       	cpi	r24, 0x03	; 3
     fe8:	b1 f0       	breq	.+44     	; 0x1016 <_Z17readDigitalOutputh+0x30>
     fea:	28 f4       	brcc	.+10     	; 0xff6 <_Z17readDigitalOutputh+0x10>
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	49 f0       	breq	.+18     	; 0x1002 <_Z17readDigitalOutputh+0x1c>
     ff0:	82 30       	cpi	r24, 0x02	; 2
     ff2:	61 f0       	breq	.+24     	; 0x100c <_Z17readDigitalOutputh+0x26>
     ff4:	23 c0       	rjmp	.+70     	; 0x103c <_Z17readDigitalOutputh+0x56>
     ff6:	85 30       	cpi	r24, 0x05	; 5
     ff8:	b9 f0       	breq	.+46     	; 0x1028 <_Z17readDigitalOutputh+0x42>
     ffa:	90 f0       	brcs	.+36     	; 0x1020 <_Z17readDigitalOutputh+0x3a>
     ffc:	86 30       	cpi	r24, 0x06	; 6
     ffe:	c9 f0       	breq	.+50     	; 0x1032 <_Z17readDigitalOutputh+0x4c>
    1000:	1d c0       	rjmp	.+58     	; 0x103c <_Z17readDigitalOutputh+0x56>
	{
		case 1:
			return DO1_STATE;
    1002:	8b b1       	in	r24, 0x0b	; 11
    1004:	86 fb       	bst	r24, 6
    1006:	88 27       	eor	r24, r24
    1008:	80 f9       	bld	r24, 0
    100a:	08 95       	ret
			break;

		case 2:
			return DO2_STATE;
    100c:	85 b1       	in	r24, 0x05	; 5
    100e:	82 fb       	bst	r24, 2
    1010:	88 27       	eor	r24, r24
    1012:	80 f9       	bld	r24, 0
    1014:	08 95       	ret
			break;

		case 3:
			return DO3_STATE;
    1016:	85 b1       	in	r24, 0x05	; 5
    1018:	83 fb       	bst	r24, 3
    101a:	88 27       	eor	r24, r24
    101c:	80 f9       	bld	r24, 0
    101e:	08 95       	ret
			break;

		case 4:
			return DO4_STATE;
    1020:	85 b1       	in	r24, 0x05	; 5
    1022:	86 95       	lsr	r24
    1024:	81 70       	andi	r24, 0x01	; 1
    1026:	08 95       	ret
			break;

		case 5:
			return DO5_STATE;
    1028:	8b b1       	in	r24, 0x0b	; 11
    102a:	88 1f       	adc	r24, r24
    102c:	88 27       	eor	r24, r24
    102e:	88 1f       	adc	r24, r24
    1030:	08 95       	ret
			break;

		case 6:
			return DO6_STATE;
    1032:	85 b1       	in	r24, 0x05	; 5
    1034:	85 fb       	bst	r24, 5
    1036:	88 27       	eor	r24, r24
    1038:	80 f9       	bld	r24, 0
    103a:	08 95       	ret
			break;
		
		default:
			return 0;
    103c:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
}
    103e:	08 95       	ret

00001040 <_Z41__static_initialization_and_destruction_0ii>:
	vTaskStartScheduler();
	
	while (1) 
	{
	}
}
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	49 f4       	brne	.+18     	; 0x1056 <_Z41__static_initialization_and_destruction_0ii+0x16>
    1044:	6f 3f       	cpi	r22, 0xFF	; 255
    1046:	7f 4f       	sbci	r23, 0xFF	; 255
    1048:	31 f4       	brne	.+12     	; 0x1056 <_Z41__static_initialization_and_destruction_0ii+0x16>
||defined(__AVR_ATmega48__)||defined(__AVR_ATmega48P__)||defined(__AVR_ATmega48PA__)||defined(__AVR_ATmega48PB__)\
||defined(__AVR_ATmega88__)||defined(__AVR_ATmega88P__)||defined(__AVR_ATmega88PA__)||defined(__AVR_ATmega88PB__)\
||defined(__AVR_ATmega168__)||defined(__AVR_ATmega168P__)||defined(__AVR_ATmega168PA__)||defined(__AVR_ATmega168PB__)\
||defined(__AVR_ATmega328__)||defined(__AVR_ATmega328P__)
	
	class Uart : public UartBase
    104a:	84 e2       	ldi	r24, 0x24	; 36
    104c:	91 e0       	ldi	r25, 0x01	; 1
    104e:	90 93 73 07 	sts	0x0773, r25	; 0x800773 <uart+0x1>
    1052:	80 93 72 07 	sts	0x0772, r24	; 0x800772 <uart>
    1056:	08 95       	ret

00001058 <_ZL14vLEDBlink_taskPv>:

Uart uart;


static void vLEDBlink_task(void * pvParameters) 
{
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	00 d0       	rcall	.+0      	; 0x105e <_ZL14vLEDBlink_taskPv+0x6>
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
	uint16_t * parameters = (uint16_t *) pvParameters;
	uint8_t pin = (uint8_t)parameters[0];
    1062:	fc 01       	movw	r30, r24
    1064:	10 81       	ld	r17, Z
	uint16_t delay_ms = parameters[1];
    1066:	e2 80       	ldd	r14, Z+2	; 0x02
    1068:	f3 80       	ldd	r15, Z+3	; 0x03
	
	TickType_t xNextWakeTime = xTaskGetTickCount();
    106a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <xTaskGetTickCount>
    106e:	9a 83       	std	Y+2, r25	; 0x02
    1070:	89 83       	std	Y+1, r24	; 0x01
	const int delayTime = delay_ms / portTICK_PERIOD_MS;
	
	while (1)
	{
		if (pin == 5)
    1072:	15 30       	cpi	r17, 0x05	; 5
    1074:	39 f4       	brne	.+14     	; 0x1084 <_ZL14vLEDBlink_taskPv+0x2c>
		{
			uart.println_P(PSTR("task 1"));
    1076:	6f e6       	ldi	r22, 0x6F	; 111
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	82 e7       	ldi	r24, 0x72	; 114
    107c:	97 e0       	ldi	r25, 0x07	; 7
    107e:	0e 94 29 0a 	call	0x1452	; 0x1452 <_ZN8UartBase9println_PEPKc>
    1082:	08 c0       	rjmp	.+16     	; 0x1094 <_ZL14vLEDBlink_taskPv+0x3c>
		}
		else if (pin == 6)
    1084:	16 30       	cpi	r17, 0x06	; 6
    1086:	31 f4       	brne	.+12     	; 0x1094 <_ZL14vLEDBlink_taskPv+0x3c>
		{
			uart.println_P(PSTR("task 2"));
    1088:	68 e6       	ldi	r22, 0x68	; 104
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	82 e7       	ldi	r24, 0x72	; 114
    108e:	97 e0       	ldi	r25, 0x07	; 7
    1090:	0e 94 29 0a 	call	0x1452	; 0x1452 <_ZN8UartBase9println_PEPKc>
		}
		
		if (readDigitalOutput(pin))
    1094:	81 2f       	mov	r24, r17
    1096:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <_Z17readDigitalOutputh>
    109a:	88 23       	and	r24, r24
    109c:	29 f0       	breq	.+10     	; 0x10a8 <_ZL14vLEDBlink_taskPv+0x50>
		{
			digitalOutput(pin, false);
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	81 2f       	mov	r24, r17
    10a2:	0e 94 a9 07 	call	0xf52	; 0xf52 <_Z13digitalOutputhb>
    10a6:	04 c0       	rjmp	.+8      	; 0x10b0 <_ZL14vLEDBlink_taskPv+0x58>
		} 
		else
		{
			digitalOutput(pin, true);
    10a8:	61 e0       	ldi	r22, 0x01	; 1
    10aa:	81 2f       	mov	r24, r17
    10ac:	0e 94 a9 07 	call	0xf52	; 0xf52 <_Z13digitalOutputhb>
		}
		vTaskDelayUntil(&xNextWakeTime, delayTime);
    10b0:	b7 01       	movw	r22, r14
    10b2:	ce 01       	movw	r24, r28
    10b4:	01 96       	adiw	r24, 0x01	; 1
    10b6:	0e 94 ca 06 	call	0xd94	; 0xd94 <xTaskDelayUntil>
	uint16_t delay_ms = parameters[1];
	
	TickType_t xNextWakeTime = xTaskGetTickCount();
	const int delayTime = delay_ms / portTICK_PERIOD_MS;
	
	while (1)
    10ba:	db cf       	rjmp	.-74     	; 0x1072 <_ZL14vLEDBlink_taskPv+0x1a>

000010bc <main>:
	}
}


int main(void)
{
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	29 97       	sbiw	r28, 0x09	; 9
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
	// Watchdog
	//wdt_enable(WDTO_1S);
	//wdt_reset();
	
	ioInit();
    10d0:	0e 94 60 07 	call	0xec0	; 0xec0 <_Z6ioInitv>
	
	init_millis();
    10d4:	0e 94 ef 08 	call	0x11de	; 0x11de <_Z11init_millisv>
	
	//Uart uart;
	uart.init(BAUD_CALC(9600));
    10d8:	67 e6       	ldi	r22, 0x67	; 103
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	82 e7       	ldi	r24, 0x72	; 114
    10de:	97 e0       	ldi	r25, 0x07	; 7
    10e0:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN4Uart4initEj>
	
	Adc adc;
	adc.init(VREF_PIN_AREF, PRESCALER_DIV_128, SINGLE_CONVERSION);
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	47 e0       	ldi	r20, 0x07	; 7
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	ce 01       	movw	r24, r28
    10ec:	01 96       	adiw	r24, 0x01	; 1
    10ee:	0e 94 73 00 	call	0xe6	; 0xe6 <_ZN3Adc4initEh12adcPrescalerh>
	
	uart.println_P(PSTR("iniciando.."));
    10f2:	63 e8       	ldi	r22, 0x83	; 131
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	82 e7       	ldi	r24, 0x72	; 114
    10f8:	97 e0       	ldi	r25, 0x07	; 7
    10fa:	0e 94 29 0a 	call	0x1452	; 0x1452 <_ZN8UartBase9println_PEPKc>
	// Secuencia de inicio de los LEDs.
	for (uint8_t i = 0; i < 3; i++)
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	83 30       	cpi	r24, 0x03	; 3
    1102:	a0 f5       	brcc	.+104    	; 0x116c <main+0xb0>
    1104:	90 e0       	ldi	r25, 0x00	; 0
	{
		//wdt_reset();
		for (uint8_t i = 0; i < 2; i++)
    1106:	92 30       	cpi	r25, 0x02	; 2
    1108:	30 f5       	brcc	.+76     	; 0x1156 <main+0x9a>
		{
			DO5_ON;
    110a:	2b b1       	in	r18, 0x0b	; 11
    110c:	20 68       	ori	r18, 0x80	; 128
    110e:	2b b9       	out	0x0b, r18	; 11
			DO6_ON;
    1110:	25 b1       	in	r18, 0x05	; 5
    1112:	20 62       	ori	r18, 0x20	; 32
    1114:	25 b9       	out	0x05, r18	; 5
			LED_ON;
    1116:	25 b1       	in	r18, 0x05	; 5
    1118:	21 60       	ori	r18, 0x01	; 1
    111a:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    111c:	2f ef       	ldi	r18, 0xFF	; 255
    111e:	37 ee       	ldi	r19, 0xE7	; 231
    1120:	43 e0       	ldi	r20, 0x03	; 3
    1122:	21 50       	subi	r18, 0x01	; 1
    1124:	30 40       	sbci	r19, 0x00	; 0
    1126:	40 40       	sbci	r20, 0x00	; 0
    1128:	e1 f7       	brne	.-8      	; 0x1122 <main+0x66>
    112a:	00 c0       	rjmp	.+0      	; 0x112c <main+0x70>
    112c:	00 00       	nop
			_delay_ms(80);
			DO5_OFF;
    112e:	2b b1       	in	r18, 0x0b	; 11
    1130:	2f 77       	andi	r18, 0x7F	; 127
    1132:	2b b9       	out	0x0b, r18	; 11
			DO6_OFF;
    1134:	25 b1       	in	r18, 0x05	; 5
    1136:	2f 7d       	andi	r18, 0xDF	; 223
    1138:	25 b9       	out	0x05, r18	; 5
			LED_OFF;
    113a:	25 b1       	in	r18, 0x05	; 5
    113c:	2e 7f       	andi	r18, 0xFE	; 254
    113e:	25 b9       	out	0x05, r18	; 5
    1140:	2f ef       	ldi	r18, 0xFF	; 255
    1142:	31 ee       	ldi	r19, 0xE1	; 225
    1144:	44 e0       	ldi	r20, 0x04	; 4
    1146:	21 50       	subi	r18, 0x01	; 1
    1148:	30 40       	sbci	r19, 0x00	; 0
    114a:	40 40       	sbci	r20, 0x00	; 0
    114c:	e1 f7       	brne	.-8      	; 0x1146 <main+0x8a>
    114e:	00 c0       	rjmp	.+0      	; 0x1150 <main+0x94>
    1150:	00 00       	nop
	uart.println_P(PSTR("iniciando.."));
	// Secuencia de inicio de los LEDs.
	for (uint8_t i = 0; i < 3; i++)
	{
		//wdt_reset();
		for (uint8_t i = 0; i < 2; i++)
    1152:	9f 5f       	subi	r25, 0xFF	; 255
    1154:	d8 cf       	rjmp	.-80     	; 0x1106 <main+0x4a>
    1156:	9f ef       	ldi	r25, 0xFF	; 255
    1158:	2b e4       	ldi	r18, 0x4B	; 75
    115a:	3d e1       	ldi	r19, 0x1D	; 29
    115c:	91 50       	subi	r25, 0x01	; 1
    115e:	20 40       	sbci	r18, 0x00	; 0
    1160:	30 40       	sbci	r19, 0x00	; 0
    1162:	e1 f7       	brne	.-8      	; 0x115c <main+0xa0>
    1164:	00 c0       	rjmp	.+0      	; 0x1166 <main+0xaa>
    1166:	00 00       	nop
	Adc adc;
	adc.init(VREF_PIN_AREF, PRESCALER_DIV_128, SINGLE_CONVERSION);
	
	uart.println_P(PSTR("iniciando.."));
	// Secuencia de inicio de los LEDs.
	for (uint8_t i = 0; i < 3; i++)
    1168:	8f 5f       	subi	r24, 0xFF	; 255
    116a:	ca cf       	rjmp	.-108    	; 0x1100 <main+0x44>
		}
		
		_delay_ms(600);
	}
	
	uart.println_P(PSTR("Hello world!"));
    116c:	66 e7       	ldi	r22, 0x76	; 118
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	82 e7       	ldi	r24, 0x72	; 114
    1172:	97 e0       	ldi	r25, 0x07	; 7
    1174:	0e 94 29 0a 	call	0x1452	; 0x1452 <_ZN8UartBase9println_PEPKc>
	
	uint16_t config_1[] = {5, 300};
    1178:	85 e0       	ldi	r24, 0x05	; 5
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	9b 83       	std	Y+3, r25	; 0x03
    117e:	8a 83       	std	Y+2, r24	; 0x02
    1180:	8c e2       	ldi	r24, 0x2C	; 44
    1182:	91 e0       	ldi	r25, 0x01	; 1
    1184:	9d 83       	std	Y+5, r25	; 0x05
    1186:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t config_2[] = {6, 1000};
    1188:	86 e0       	ldi	r24, 0x06	; 6
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	9f 83       	std	Y+7, r25	; 0x07
    118e:	8e 83       	std	Y+6, r24	; 0x06
    1190:	88 ee       	ldi	r24, 0xE8	; 232
    1192:	93 e0       	ldi	r25, 0x03	; 3
    1194:	99 87       	std	Y+9, r25	; 0x09
    1196:	88 87       	std	Y+8, r24	; 0x08
	
	xTaskCreate(vLEDBlink_task, "LED Blink", configMINIMAL_STACK_SIZE, (void *) config_1, 1, NULL);
    1198:	e1 2c       	mov	r14, r1
    119a:	f1 2c       	mov	r15, r1
    119c:	01 e0       	ldi	r16, 0x01	; 1
    119e:	9e 01       	movw	r18, r28
    11a0:	2e 5f       	subi	r18, 0xFE	; 254
    11a2:	3f 4f       	sbci	r19, 0xFF	; 255
    11a4:	45 e5       	ldi	r20, 0x55	; 85
    11a6:	50 e0       	ldi	r21, 0x00	; 0
    11a8:	66 e0       	ldi	r22, 0x06	; 6
    11aa:	71 e0       	ldi	r23, 0x01	; 1
    11ac:	8c e2       	ldi	r24, 0x2C	; 44
    11ae:	98 e0       	ldi	r25, 0x08	; 8
    11b0:	0e 94 4b 04 	call	0x896	; 0x896 <xTaskCreate>
	xTaskCreate(vLEDBlink_task, "LED Other Blink", configMINIMAL_STACK_SIZE, (void *) config_2, 1, NULL);
    11b4:	9e 01       	movw	r18, r28
    11b6:	2a 5f       	subi	r18, 0xFA	; 250
    11b8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ba:	45 e5       	ldi	r20, 0x55	; 85
    11bc:	50 e0       	ldi	r21, 0x00	; 0
    11be:	60 e1       	ldi	r22, 0x10	; 16
    11c0:	71 e0       	ldi	r23, 0x01	; 1
    11c2:	8c e2       	ldi	r24, 0x2C	; 44
    11c4:	98 e0       	ldi	r25, 0x08	; 8
    11c6:	0e 94 4b 04 	call	0x896	; 0x896 <xTaskCreate>

	vTaskStartScheduler();
    11ca:	0e 94 9f 04 	call	0x93e	; 0x93e <vTaskStartScheduler>
    11ce:	ff cf       	rjmp	.-2      	; 0x11ce <main+0x112>

000011d0 <_GLOBAL__sub_I_uart>:
	
	while (1) 
	{
	}
}
    11d0:	6f ef       	ldi	r22, 0xFF	; 255
    11d2:	7f ef       	ldi	r23, 0xFF	; 255
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 94 20 08 	call	0x1040	; 0x1040 <_Z41__static_initialization_and_destruction_0ii>
    11dc:	08 95       	ret

000011de <_Z11init_millisv>:

void init_millis(void)
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    11de:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
	#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    11e0:	84 b5       	in	r24, 0x24	; 36
    11e2:	82 60       	ori	r24, 0x02	; 2
    11e4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    11e6:	84 b5       	in	r24, 0x24	; 36
    11e8:	81 60       	ori	r24, 0x01	; 1
    11ea:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
	#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    11ec:	85 b5       	in	r24, 0x25	; 37
    11ee:	82 60       	ori	r24, 0x02	; 2
    11f0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    11f2:	85 b5       	in	r24, 0x25	; 37
    11f4:	81 60       	ori	r24, 0x01	; 1
    11f6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
	#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
	#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    11f8:	ee e6       	ldi	r30, 0x6E	; 110
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	81 60       	ori	r24, 0x01	; 1
    1200:	80 83       	st	Z, r24
    1202:	08 95       	ret

00001204 <__vector_16>:
volatile uint32_t timer0_overflow_count = 0;
volatile uint32_t timer0_millis = 0;
static uint8_t timer0_fract = 0;

ISR(TIMER0_OVF_vect)
{
    1204:	1f 92       	push	r1
    1206:	0f 92       	push	r0
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	0f 92       	push	r0
    120c:	11 24       	eor	r1, r1
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
    1212:	2f 93       	push	r18
    1214:	3f 93       	push	r19
    1216:	4f 93       	push	r20
    1218:	5f 93       	push	r21
    121a:	6f 93       	push	r22
    121c:	7f 93       	push	r23
    121e:	8f 93       	push	r24
    1220:	9f 93       	push	r25
    1222:	af 93       	push	r26
    1224:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	uint32_t m = timer0_millis;
    1226:	00 91 77 07 	lds	r16, 0x0777	; 0x800777 <timer0_millis>
    122a:	10 91 78 07 	lds	r17, 0x0778	; 0x800778 <timer0_millis+0x1>
    122e:	20 91 79 07 	lds	r18, 0x0779	; 0x800779 <timer0_millis+0x2>
    1232:	30 91 7a 07 	lds	r19, 0x077A	; 0x80077a <timer0_millis+0x3>
	uint8_t f = timer0_fract;
    1236:	90 91 76 07 	lds	r25, 0x0776	; 0x800776 <_ZL12timer0_fract>
	
	m += MILLIS_INC;
    123a:	b9 01       	movw	r22, r18
    123c:	a8 01       	movw	r20, r16
    123e:	4f 5f       	subi	r20, 0xFF	; 255
    1240:	5f 4f       	sbci	r21, 0xFF	; 255
    1242:	6f 4f       	sbci	r22, 0xFF	; 255
    1244:	7f 4f       	sbci	r23, 0xFF	; 255
	f += FRACT_INC;
    1246:	83 e0       	ldi	r24, 0x03	; 3
    1248:	89 0f       	add	r24, r25
	if (f >= FRACT_MAX) 
    124a:	8d 37       	cpi	r24, 0x7D	; 125
    124c:	40 f0       	brcs	.+16     	; 0x125e <__vector_16+0x5a>
	{
		f -= FRACT_MAX;
    124e:	86 e8       	ldi	r24, 0x86	; 134
    1250:	89 0f       	add	r24, r25
		m += 1;
    1252:	b9 01       	movw	r22, r18
    1254:	a8 01       	movw	r20, r16
    1256:	4e 5f       	subi	r20, 0xFE	; 254
    1258:	5f 4f       	sbci	r21, 0xFF	; 255
    125a:	6f 4f       	sbci	r22, 0xFF	; 255
    125c:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	
	timer0_fract = f;
    125e:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <_ZL12timer0_fract>
	timer0_millis = m;
    1262:	40 93 77 07 	sts	0x0777, r20	; 0x800777 <timer0_millis>
    1266:	50 93 78 07 	sts	0x0778, r21	; 0x800778 <timer0_millis+0x1>
    126a:	60 93 79 07 	sts	0x0779, r22	; 0x800779 <timer0_millis+0x2>
    126e:	70 93 7a 07 	sts	0x077A, r23	; 0x80077a <timer0_millis+0x3>
	timer0_overflow_count++;
    1272:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <timer0_overflow_count>
    1276:	90 91 7c 07 	lds	r25, 0x077C	; 0x80077c <timer0_overflow_count+0x1>
    127a:	a0 91 7d 07 	lds	r26, 0x077D	; 0x80077d <timer0_overflow_count+0x2>
    127e:	b0 91 7e 07 	lds	r27, 0x077E	; 0x80077e <timer0_overflow_count+0x3>
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	a1 1d       	adc	r26, r1
    1286:	b1 1d       	adc	r27, r1
    1288:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <timer0_overflow_count>
    128c:	90 93 7c 07 	sts	0x077C, r25	; 0x80077c <timer0_overflow_count+0x1>
    1290:	a0 93 7d 07 	sts	0x077D, r26	; 0x80077d <timer0_overflow_count+0x2>
    1294:	b0 93 7e 07 	sts	0x077E, r27	; 0x80077e <timer0_overflow_count+0x3>
}
    1298:	bf 91       	pop	r27
    129a:	af 91       	pop	r26
    129c:	9f 91       	pop	r25
    129e:	8f 91       	pop	r24
    12a0:	7f 91       	pop	r23
    12a2:	6f 91       	pop	r22
    12a4:	5f 91       	pop	r21
    12a6:	4f 91       	pop	r20
    12a8:	3f 91       	pop	r19
    12aa:	2f 91       	pop	r18
    12ac:	1f 91       	pop	r17
    12ae:	0f 91       	pop	r16
    12b0:	0f 90       	pop	r0
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	0f 90       	pop	r0
    12b6:	1f 90       	pop	r1
    12b8:	18 95       	reti

000012ba <_Z6millisv>:

uint32_t millis(void)
{
	uint32_t m;
	uint8_t oldSREG = SREG;
    12ba:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    12bc:	f8 94       	cli
	m = timer0_millis;
    12be:	60 91 77 07 	lds	r22, 0x0777	; 0x800777 <timer0_millis>
    12c2:	70 91 78 07 	lds	r23, 0x0778	; 0x800778 <timer0_millis+0x1>
    12c6:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <timer0_millis+0x2>
    12ca:	90 91 7a 07 	lds	r25, 0x077A	; 0x80077a <timer0_millis+0x3>
	SREG = oldSREG;
    12ce:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    12d0:	08 95       	ret

000012d2 <_ZN4Uart4initEj>:
{
	for (uint8_t i = 0; i < numSpace; i++)
	{
		txByte(' ');
	}
}
    12d2:	dc 01       	movw	r26, r24
    12d4:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    12d8:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    12dc:	60 31       	cpi	r22, 0x10	; 16
    12de:	71 05       	cpc	r23, r1
    12e0:	31 f4       	brne	.+12     	; 0x12ee <_ZN4Uart4initEj+0x1c>
    12e2:	e0 ec       	ldi	r30, 0xC0	; 192
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	82 60       	ori	r24, 0x02	; 2
    12ea:	80 83       	st	Z, r24
    12ec:	05 c0       	rjmp	.+10     	; 0x12f8 <_ZN4Uart4initEj+0x26>
    12ee:	e0 ec       	ldi	r30, 0xC0	; 192
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	90 81       	ld	r25, Z
    12f4:	9d 7f       	andi	r25, 0xFD	; 253
    12f6:	90 83       	st	Z, r25
    12f8:	88 e9       	ldi	r24, 0x98	; 152
    12fa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    12fe:	86 e0       	ldi	r24, 0x06	; 6
    1300:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1304:	83 e8       	ldi	r24, 0x83	; 131
    1306:	97 e0       	ldi	r25, 0x07	; 7
    1308:	13 96       	adiw	r26, 0x03	; 3
    130a:	9c 93       	st	X, r25
    130c:	8e 93       	st	-X, r24
    130e:	12 97       	sbiw	r26, 0x02	; 2
    1310:	78 94       	sei
    1312:	08 95       	ret

00001314 <_ZN4Uart6txByteEh>:
    1314:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1318:	85 ff       	sbrs	r24, 5
    131a:	fc cf       	rjmp	.-8      	; 0x1314 <_ZN4Uart6txByteEh>
    131c:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1320:	08 95       	ret

00001322 <_ZN4Uart9availableEv>:
    1322:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <_ZN4Uart5indexE>
    1326:	90 91 82 07 	lds	r25, 0x0782	; 0x800782 <_ZN4Uart5indexE+0x1>
    132a:	08 95       	ret

0000132c <_ZN4Uart19getFlagByteReceivedEv>:
    132c:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <_ZN4Uart16flagByteReceivedE>
    1330:	08 95       	ret

00001332 <_ZN4Uart21clearFlagByteReceivedEv>:
    1332:	10 92 80 07 	sts	0x0780, r1	; 0x800780 <_ZN4Uart16flagByteReceivedE>
    1336:	08 95       	ret

00001338 <_ZN4Uart18resetIndexRxBufferEv>:
    1338:	f8 94       	cli
    133a:	10 92 82 07 	sts	0x0782, r1	; 0x800782 <_ZN4Uart5indexE+0x1>
    133e:	10 92 81 07 	sts	0x0781, r1	; 0x800781 <_ZN4Uart5indexE>
    1342:	10 92 7f 07 	sts	0x077F, r1	; 0x80077f <uart_bufferFull>
    1346:	78 94       	sei
    1348:	08 95       	ret

0000134a <_ZN4Uart12bufferIsFullEv>:
    134a:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <uart_bufferFull>
    134e:	08 95       	ret

00001350 <_ZN4Uart12receiveBytesEh>:
    1350:	8f 92       	push	r8
    1352:	9f 92       	push	r9
    1354:	af 92       	push	r10
    1356:	bf 92       	push	r11
    1358:	cf 92       	push	r12
    135a:	df 92       	push	r13
    135c:	ef 92       	push	r14
    135e:	ff 92       	push	r15
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	ec 01       	movw	r28, r24
    1368:	90 91 80 07 	lds	r25, 0x0780	; 0x800780 <_ZN4Uart16flagByteReceivedE>
    136c:	99 23       	and	r25, r25
    136e:	79 f1       	breq	.+94     	; 0x13ce <_ZN4Uart12receiveBytesEh+0x7e>
    1370:	16 2f       	mov	r17, r22
    1372:	10 92 80 07 	sts	0x0780, r1	; 0x800780 <_ZN4Uart16flagByteReceivedE>
    1376:	0e 94 5d 09 	call	0x12ba	; 0x12ba <_Z6millisv>
    137a:	6b 01       	movw	r12, r22
    137c:	7c 01       	movw	r14, r24
    137e:	0e 94 5d 09 	call	0x12ba	; 0x12ba <_Z6millisv>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	8c 19       	sub	r24, r12
    1388:	9d 09       	sbc	r25, r13
    138a:	ae 09       	sbc	r26, r14
    138c:	bf 09       	sbc	r27, r15
    138e:	81 2e       	mov	r8, r17
    1390:	91 2c       	mov	r9, r1
    1392:	a1 2c       	mov	r10, r1
    1394:	b1 2c       	mov	r11, r1
    1396:	88 15       	cp	r24, r8
    1398:	99 05       	cpc	r25, r9
    139a:	aa 05       	cpc	r26, r10
    139c:	bb 05       	cpc	r27, r11
    139e:	48 f4       	brcc	.+18     	; 0x13b2 <_ZN4Uart12receiveBytesEh+0x62>
    13a0:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <_ZN4Uart16flagByteReceivedE>
    13a4:	88 23       	and	r24, r24
    13a6:	59 f3       	breq	.-42     	; 0x137e <_ZN4Uart12receiveBytesEh+0x2e>
    13a8:	10 92 80 07 	sts	0x0780, r1	; 0x800780 <_ZN4Uart16flagByteReceivedE>
    13ac:	0e 94 5d 09 	call	0x12ba	; 0x12ba <_Z6millisv>
    13b0:	e6 cf       	rjmp	.-52     	; 0x137e <_ZN4Uart12receiveBytesEh+0x2e>
    13b2:	e0 90 81 07 	lds	r14, 0x0781	; 0x800781 <_ZN4Uart5indexE>
    13b6:	f0 90 82 07 	lds	r15, 0x0782	; 0x800782 <_ZN4Uart5indexE+0x1>
    13ba:	e8 81       	ld	r30, Y
    13bc:	f9 81       	ldd	r31, Y+1	; 0x01
    13be:	02 84       	ldd	r0, Z+10	; 0x0a
    13c0:	f3 85       	ldd	r31, Z+11	; 0x0b
    13c2:	e0 2d       	mov	r30, r0
    13c4:	ce 01       	movw	r24, r28
    13c6:	09 95       	icall
    13c8:	8e 2d       	mov	r24, r14
    13ca:	9f 2d       	mov	r25, r15
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <_ZN4Uart12receiveBytesEh+0x82>
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	1f 91       	pop	r17
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
    13dc:	df 90       	pop	r13
    13de:	cf 90       	pop	r12
    13e0:	bf 90       	pop	r11
    13e2:	af 90       	pop	r10
    13e4:	9f 90       	pop	r9
    13e6:	8f 90       	pop	r8
    13e8:	08 95       	ret

000013ea <_ZN8UartBase7print_PEPKc>:
    13ea:	ef 92       	push	r14
    13ec:	ff 92       	push	r15
    13ee:	1f 93       	push	r17
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	7c 01       	movw	r14, r24
    13f6:	eb 01       	movw	r28, r22
    13f8:	fe 01       	movw	r30, r28
    13fa:	14 91       	lpm	r17, Z
    13fc:	d7 01       	movw	r26, r14
    13fe:	ed 91       	ld	r30, X+
    1400:	fc 91       	ld	r31, X
    1402:	02 80       	ldd	r0, Z+2	; 0x02
    1404:	f3 81       	ldd	r31, Z+3	; 0x03
    1406:	e0 2d       	mov	r30, r0
    1408:	61 2f       	mov	r22, r17
    140a:	c7 01       	movw	r24, r14
    140c:	09 95       	icall
    140e:	21 96       	adiw	r28, 0x01	; 1
    1410:	11 11       	cpse	r17, r1
    1412:	f2 cf       	rjmp	.-28     	; 0x13f8 <_ZN8UartBase7print_PEPKc+0xe>
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	1f 91       	pop	r17
    141a:	ff 90       	pop	r15
    141c:	ef 90       	pop	r14
    141e:	08 95       	ret

00001420 <_ZN8UartBase12printnewlineEh>:
    1420:	0f 93       	push	r16
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	8c 01       	movw	r16, r24
    142a:	d6 2f       	mov	r29, r22
    142c:	c0 e0       	ldi	r28, 0x00	; 0
    142e:	cd 17       	cp	r28, r29
    1430:	58 f4       	brcc	.+22     	; 0x1448 <_ZN8UartBase12printnewlineEh+0x28>
    1432:	d8 01       	movw	r26, r16
    1434:	ed 91       	ld	r30, X+
    1436:	fc 91       	ld	r31, X
    1438:	02 80       	ldd	r0, Z+2	; 0x02
    143a:	f3 81       	ldd	r31, Z+3	; 0x03
    143c:	e0 2d       	mov	r30, r0
    143e:	6a e0       	ldi	r22, 0x0A	; 10
    1440:	c8 01       	movw	r24, r16
    1442:	09 95       	icall
    1444:	cf 5f       	subi	r28, 0xFF	; 255
    1446:	f3 cf       	rjmp	.-26     	; 0x142e <_ZN8UartBase12printnewlineEh+0xe>
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	1f 91       	pop	r17
    144e:	0f 91       	pop	r16
    1450:	08 95       	ret

00001452 <_ZN8UartBase9println_PEPKc>:
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	ec 01       	movw	r28, r24
    1458:	0e 94 f5 09 	call	0x13ea	; 0x13ea <_ZN8UartBase7print_PEPKc>
    145c:	61 e0       	ldi	r22, 0x01	; 1
    145e:	ce 01       	movw	r24, r28
    1460:	0e 94 10 0a 	call	0x1420	; 0x1420 <_ZN8UartBase12printnewlineEh>
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	08 95       	ret

0000146a <_ZN4Uart13rxIsrFunctionEv>:
		UDR0 = n;  // Put data into buffer, sends the data
	}
	
	void Uart::rxIsrFunction(void)  // Función estática para rutina de servicio de interrupción de UART Rx.
	{
		if (Uart::index < SERIAL_BUFF_LEN)   // Si no se ha llenado el buffer Rx serial.
    146a:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <_ZN4Uart5indexE>
    146e:	90 91 82 07 	lds	r25, 0x0782	; 0x800782 <_ZN4Uart5indexE+0x1>
    1472:	88 97       	sbiw	r24, 0x28	; 40
    1474:	a8 f4       	brcc	.+42     	; 0x14a0 <_ZN4Uart13rxIsrFunctionEv+0x36>
		{
			Uart::_rxBuffer[Uart::index] = UDR0;  // Lee el Byte recibido y lo guarda en el buffer.
    1476:	e0 91 81 07 	lds	r30, 0x0781	; 0x800781 <_ZN4Uart5indexE>
    147a:	f0 91 82 07 	lds	r31, 0x0782	; 0x800782 <_ZN4Uart5indexE+0x1>
    147e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1482:	ed 57       	subi	r30, 0x7D	; 125
    1484:	f8 4f       	sbci	r31, 0xF8	; 248
    1486:	80 83       	st	Z, r24
			Uart::index++;
    1488:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <_ZN4Uart5indexE>
    148c:	90 91 82 07 	lds	r25, 0x0782	; 0x800782 <_ZN4Uart5indexE+0x1>
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	90 93 82 07 	sts	0x0782, r25	; 0x800782 <_ZN4Uart5indexE+0x1>
    1496:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <_ZN4Uart5indexE>
			uart_bufferFull = false;
    149a:	10 92 7f 07 	sts	0x077F, r1	; 0x80077f <uart_bufferFull>
    149e:	0a c0       	rjmp	.+20     	; 0x14b4 <_ZN4Uart13rxIsrFunctionEv+0x4a>
		}
		else  // Si el buffer está lleno.
		{
			uint8_t dummy;
			while (UCSR0A & (1<<RXC0)) dummy = UDR0;  // Vacía UDR0 para poder recibir el próximo mensaje.
    14a0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    14a4:	88 23       	and	r24, r24
    14a6:	1c f4       	brge	.+6      	; 0x14ae <_ZN4Uart13rxIsrFunctionEv+0x44>
    14a8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    14ac:	f9 cf       	rjmp	.-14     	; 0x14a0 <_ZN4Uart13rxIsrFunctionEv+0x36>
			uart_bufferFull = true;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	80 93 7f 07 	sts	0x077F, r24	; 0x80077f <uart_bufferFull>
		}
		
		Uart::flagByteReceived = true;
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <_ZN4Uart16flagByteReceivedE>
    14ba:	08 95       	ret

000014bc <__vector_18>:
	}
	
	ISR(USART_RX_vect)
	{		
    14bc:	1f 92       	push	r1
    14be:	0f 92       	push	r0
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	0f 92       	push	r0
    14c4:	11 24       	eor	r1, r1
    14c6:	2f 93       	push	r18
    14c8:	3f 93       	push	r19
    14ca:	4f 93       	push	r20
    14cc:	5f 93       	push	r21
    14ce:	6f 93       	push	r22
    14d0:	7f 93       	push	r23
    14d2:	8f 93       	push	r24
    14d4:	9f 93       	push	r25
    14d6:	af 93       	push	r26
    14d8:	bf 93       	push	r27
    14da:	ef 93       	push	r30
    14dc:	ff 93       	push	r31
		Uart::rxIsrFunction();
    14de:	0e 94 35 0a 	call	0x146a	; 0x146a <_ZN4Uart13rxIsrFunctionEv>
	}
    14e2:	ff 91       	pop	r31
    14e4:	ef 91       	pop	r30
    14e6:	bf 91       	pop	r27
    14e8:	af 91       	pop	r26
    14ea:	9f 91       	pop	r25
    14ec:	8f 91       	pop	r24
    14ee:	7f 91       	pop	r23
    14f0:	6f 91       	pop	r22
    14f2:	5f 91       	pop	r21
    14f4:	4f 91       	pop	r20
    14f6:	3f 91       	pop	r19
    14f8:	2f 91       	pop	r18
    14fa:	0f 90       	pop	r0
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	0f 90       	pop	r0
    1500:	1f 90       	pop	r1
    1502:	18 95       	reti

00001504 <__tablejump2__>:
    1504:	ee 0f       	add	r30, r30
    1506:	ff 1f       	adc	r31, r31
    1508:	05 90       	lpm	r0, Z+
    150a:	f4 91       	lpm	r31, Z
    150c:	e0 2d       	mov	r30, r0
    150e:	09 94       	ijmp

00001510 <_exit>:
    1510:	f8 94       	cli

00001512 <__stop_program>:
    1512:	ff cf       	rjmp	.-2      	; 0x1512 <__stop_program>
